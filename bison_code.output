Terminals unused in grammar

    KW_Const


State 42 conflicts: 2 shift/reduce
State 43 conflicts: 2 shift/reduce
State 44 conflicts: 2 shift/reduce
State 45 conflicts: 2 shift/reduce
State 46 conflicts: 2 shift/reduce
State 53 conflicts: 2 shift/reduce


Grammar

    0 $accept: Prog $end

    1 Prog: Declarations_Liste Instructions_Liste

    2 Declarations_Liste: ε
    3                   | VarInit Declarations_Liste
    4                   | FuncDeclaration Declarations_Liste
    5                   | ProDeclaration Declarations_Liste
    6                   | VarDeclaration Declarations_Liste

    7 VarDeclaration: Type G_IDF ';'

    8 FuncDeclaration: KW_Function Type IDF '(' Parameter_Liste ')' '{' VarInit Instructions Return '}'

    9 ProDeclaration: KW_Void IDF '(' Parameter_Liste ')' '{' VarInit Instructions '}'

   10 Parameter_Liste: ε
   11                | Type IDF ',' Parameter_Liste

   12 Return: KW_Return INT ';'
   13       | KW_Return FLOAT ';'
   14       | KW_Return BOOL ';'
   15       | KW_Return IDF ';'

   16 VarInit: Type Assignment

   17 Assignment: G_IDF SC_ASSIGN INT ';'
   18           | G_IDF SC_ASSIGN FLOAT ';'
   19           | G_IDF SC_ASSIGN BOOL ';'

   20 G_IDF: G_IDF ',' IDF
   21      | IDF

   22 Type: KW_int
   23     | KW_float
   24     | KW_boolean

   25 Instructions_Liste: KW_BEGIN Instructions KW_END

   26 Instructions: ε
   27             | Assignment Instructions
   28             | For Instructions
   29             | If Instructions
   30             | Div Instructions
   31             | Mult Instructions
   32             | Add Instructions
   33             | Sub Instructions
   34             | Mod Instructions
   35             | Increment ';' Instructions
   36             | Decrement ';' Instructions
   37             | FuncCall Instructions
   38             | ProCall Instructions

   39 ArithmeticOp: UnaryPlus
   40             | UnaryMinus
   41             | Div
   42             | Mult
   43             | Add
   44             | Sub
   45             | Mod

   46 UnaryPlus: '+' OpSide

   47 UnaryMinus: '-' OpSide

   48 Div: OpSide '/' OpSide

   49 Mult: OpSide '*' OpSide

   50 Add: OpSide '+' OpSide

   51 Sub: OpSide '-' OpSide

   52 Mod: OpSide '%' OpSide

   53 Increment: IDF SC_INCR

   54 Decrement: IDF SC_DECR

   55 RelationalOp: EqualityOp
   56             | InequalityOp

   57 EqualityOp: SC_EQUALS
   58           | SC_DIFF

   59 InequalityOp: SC_LOE
   60             | SC_GOE
   61             | '>'
   62             | '<'

   63 OpSide: IDF
   64       | Num
   65       | ArithmeticOp
   66       | FuncCall

   67 Condition: '(' Expression ')'

   68 Expression: OpSide RelationalOp OpSide

   69 Num: INT
   70    | FLOAT

   71 For: KW_For '(' IDF SC_ASSIGN INT ';' Expression ';' Increment ')' '{' Instructions '}'

   72 If: KW_If Condition '{' Instructions '}'
   73   | KW_If Condition '{' Instructions '}' KW_Else '{' Instructions '}'

   74 FuncCall: KW_Fc IDF '(' Args_Liste ')' ';'

   75 ProCall: KW_Pc IDF '(' Args_Liste ')' ';'

   76 Args_Liste: ε
   77           | G_IDF


Terminals, with rules where they appear

    $end (0) 0
    '%' (37) 52
    '(' (40) 8 9 67 71 74 75
    ')' (41) 8 9 67 71 74 75
    '*' (42) 49
    '+' (43) 46 50
    ',' (44) 11 20
    '-' (45) 47 51
    '/' (47) 48
    ';' (59) 7 12 13 14 15 17 18 19 35 36 71 74 75
    '<' (60) 62
    '>' (62) 61
    '{' (123) 8 9 71 72 73
    '}' (125) 8 9 71 72 73
    error (256)
    INT <integer> (258) 12 17 69 71
    FLOAT <floatV> (259) 13 18 70
    BOOL <bool> (260) 14 19
    IDF <string> (261) 8 9 11 15 20 21 53 54 63 71 74 75
    SC_ASSIGN <specialChar> (262) 17 18 19 71
    SC_EQUALS <specialChar> (263) 57
    SC_DIFF <specialChar> (264) 58
    SC_LOE <specialChar> (265) 59
    SC_GOE <specialChar> (266) 60
    SC_INCR (267) 53
    SC_DECR (268) 54
    KW_int <string> (269) 22
    KW_float <string> (270) 23
    KW_boolean <string> (271) 24
    KW_For <string> (272) 71
    KW_If <string> (273) 72 73
    KW_Else <string> (274) 73
    KW_BEGIN <string> (275) 25
    KW_END <string> (276) 25
    KW_Return (277) 12 13 14 15
    KW_Const (278)
    KW_Void (279) 9
    KW_Pc (280) 75
    KW_Fc (281) 74
    KW_Function (282) 8


Nonterminals, with rules where they appear

    $accept (41)
        on left: 0
    Prog (42)
        on left: 1
        on right: 0
    Declarations_Liste (43)
        on left: 2 3 4 5 6
        on right: 1 3 4 5 6
    VarDeclaration (44)
        on left: 7
        on right: 6
    FuncDeclaration (45)
        on left: 8
        on right: 4
    ProDeclaration (46)
        on left: 9
        on right: 5
    Parameter_Liste (47)
        on left: 10 11
        on right: 8 9 11
    Return (48)
        on left: 12 13 14 15
        on right: 8
    VarInit (49)
        on left: 16
        on right: 3 8 9
    Assignment (50)
        on left: 17 18 19
        on right: 16 27
    G_IDF (51)
        on left: 20 21
        on right: 7 17 18 19 20 77
    Type (52)
        on left: 22 23 24
        on right: 7 8 11 16
    Instructions_Liste (53)
        on left: 25
        on right: 1
    Instructions (54)
        on left: 26 27 28 29 30 31 32 33 34 35 36 37 38
        on right: 8 9 25 27 28 29 30 31 32 33 34 35 36 37 38 71 72 73
    ArithmeticOp (55)
        on left: 39 40 41 42 43 44 45
        on right: 65
    UnaryPlus (56)
        on left: 46
        on right: 39
    UnaryMinus (57)
        on left: 47
        on right: 40
    Div (58)
        on left: 48
        on right: 30 41
    Mult (59)
        on left: 49
        on right: 31 42
    Add (60)
        on left: 50
        on right: 32 43
    Sub (61)
        on left: 51
        on right: 33 44
    Mod (62)
        on left: 52
        on right: 34 45
    Increment (63)
        on left: 53
        on right: 35 71
    Decrement (64)
        on left: 54
        on right: 36
    RelationalOp (65)
        on left: 55 56
        on right: 68
    EqualityOp (66)
        on left: 57 58
        on right: 55
    InequalityOp (67)
        on left: 59 60 61 62
        on right: 56
    OpSide (68)
        on left: 63 64 65 66
        on right: 46 47 48 49 50 51 52 68
    Condition (69)
        on left: 67
        on right: 72 73
    Expression (70)
        on left: 68
        on right: 67 71
    Num (71)
        on left: 69 70
        on right: 64
    For (72)
        on left: 71
        on right: 28
    If (73)
        on left: 72 73
        on right: 29
    FuncCall (74)
        on left: 74
        on right: 37 66
    ProCall (75)
        on left: 75
        on right: 38
    Args_Liste (76)
        on left: 76 77
        on right: 74 75


State 0

    0 $accept: • Prog $end
    1 Prog: • Declarations_Liste Instructions_Liste
    2 Declarations_Liste: ε •  [KW_BEGIN]
    3                   | • VarInit Declarations_Liste
    4                   | • FuncDeclaration Declarations_Liste
    5                   | • ProDeclaration Declarations_Liste
    6                   | • VarDeclaration Declarations_Liste
    7 VarDeclaration: • Type G_IDF ';'
    8 FuncDeclaration: • KW_Function Type IDF '(' Parameter_Liste ')' '{' VarInit Instructions Return '}'
    9 ProDeclaration: • KW_Void IDF '(' Parameter_Liste ')' '{' VarInit Instructions '}'
   16 VarInit: • Type Assignment
   22 Type: • KW_int
   23     | • KW_float
   24     | • KW_boolean

    KW_int       shift, and go to state 1
    KW_float     shift, and go to state 2
    KW_boolean   shift, and go to state 3
    KW_Void      shift, and go to state 4
    KW_Function  shift, and go to state 5

    $default  reduce using rule 2 (Declarations_Liste)

    Prog                go to state 6
    Declarations_Liste  go to state 7
    VarDeclaration      go to state 8
    FuncDeclaration     go to state 9
    ProDeclaration      go to state 10
    VarInit             go to state 11
    Type                go to state 12


State 1

   22 Type: KW_int •

    $default  reduce using rule 22 (Type)


State 2

   23 Type: KW_float •

    $default  reduce using rule 23 (Type)


State 3

   24 Type: KW_boolean •

    $default  reduce using rule 24 (Type)


State 4

    9 ProDeclaration: KW_Void • IDF '(' Parameter_Liste ')' '{' VarInit Instructions '}'

    IDF  shift, and go to state 13


State 5

    8 FuncDeclaration: KW_Function • Type IDF '(' Parameter_Liste ')' '{' VarInit Instructions Return '}'
   22 Type: • KW_int
   23     | • KW_float
   24     | • KW_boolean

    KW_int      shift, and go to state 1
    KW_float    shift, and go to state 2
    KW_boolean  shift, and go to state 3

    Type  go to state 14


State 6

    0 $accept: Prog • $end

    $end  shift, and go to state 15


State 7

    1 Prog: Declarations_Liste • Instructions_Liste
   25 Instructions_Liste: • KW_BEGIN Instructions KW_END

    KW_BEGIN  shift, and go to state 16

    Instructions_Liste  go to state 17


State 8

    2 Declarations_Liste: ε •  [KW_BEGIN]
    3                   | • VarInit Declarations_Liste
    4                   | • FuncDeclaration Declarations_Liste
    5                   | • ProDeclaration Declarations_Liste
    6                   | • VarDeclaration Declarations_Liste
    6                   | VarDeclaration • Declarations_Liste
    7 VarDeclaration: • Type G_IDF ';'
    8 FuncDeclaration: • KW_Function Type IDF '(' Parameter_Liste ')' '{' VarInit Instructions Return '}'
    9 ProDeclaration: • KW_Void IDF '(' Parameter_Liste ')' '{' VarInit Instructions '}'
   16 VarInit: • Type Assignment
   22 Type: • KW_int
   23     | • KW_float
   24     | • KW_boolean

    KW_int       shift, and go to state 1
    KW_float     shift, and go to state 2
    KW_boolean   shift, and go to state 3
    KW_Void      shift, and go to state 4
    KW_Function  shift, and go to state 5

    $default  reduce using rule 2 (Declarations_Liste)

    Declarations_Liste  go to state 18
    VarDeclaration      go to state 8
    FuncDeclaration     go to state 9
    ProDeclaration      go to state 10
    VarInit             go to state 11
    Type                go to state 12


State 9

    2 Declarations_Liste: ε •  [KW_BEGIN]
    3                   | • VarInit Declarations_Liste
    4                   | • FuncDeclaration Declarations_Liste
    4                   | FuncDeclaration • Declarations_Liste
    5                   | • ProDeclaration Declarations_Liste
    6                   | • VarDeclaration Declarations_Liste
    7 VarDeclaration: • Type G_IDF ';'
    8 FuncDeclaration: • KW_Function Type IDF '(' Parameter_Liste ')' '{' VarInit Instructions Return '}'
    9 ProDeclaration: • KW_Void IDF '(' Parameter_Liste ')' '{' VarInit Instructions '}'
   16 VarInit: • Type Assignment
   22 Type: • KW_int
   23     | • KW_float
   24     | • KW_boolean

    KW_int       shift, and go to state 1
    KW_float     shift, and go to state 2
    KW_boolean   shift, and go to state 3
    KW_Void      shift, and go to state 4
    KW_Function  shift, and go to state 5

    $default  reduce using rule 2 (Declarations_Liste)

    Declarations_Liste  go to state 19
    VarDeclaration      go to state 8
    FuncDeclaration     go to state 9
    ProDeclaration      go to state 10
    VarInit             go to state 11
    Type                go to state 12


State 10

    2 Declarations_Liste: ε •  [KW_BEGIN]
    3                   | • VarInit Declarations_Liste
    4                   | • FuncDeclaration Declarations_Liste
    5                   | • ProDeclaration Declarations_Liste
    5                   | ProDeclaration • Declarations_Liste
    6                   | • VarDeclaration Declarations_Liste
    7 VarDeclaration: • Type G_IDF ';'
    8 FuncDeclaration: • KW_Function Type IDF '(' Parameter_Liste ')' '{' VarInit Instructions Return '}'
    9 ProDeclaration: • KW_Void IDF '(' Parameter_Liste ')' '{' VarInit Instructions '}'
   16 VarInit: • Type Assignment
   22 Type: • KW_int
   23     | • KW_float
   24     | • KW_boolean

    KW_int       shift, and go to state 1
    KW_float     shift, and go to state 2
    KW_boolean   shift, and go to state 3
    KW_Void      shift, and go to state 4
    KW_Function  shift, and go to state 5

    $default  reduce using rule 2 (Declarations_Liste)

    Declarations_Liste  go to state 20
    VarDeclaration      go to state 8
    FuncDeclaration     go to state 9
    ProDeclaration      go to state 10
    VarInit             go to state 11
    Type                go to state 12


State 11

    2 Declarations_Liste: ε •  [KW_BEGIN]
    3                   | • VarInit Declarations_Liste
    3                   | VarInit • Declarations_Liste
    4                   | • FuncDeclaration Declarations_Liste
    5                   | • ProDeclaration Declarations_Liste
    6                   | • VarDeclaration Declarations_Liste
    7 VarDeclaration: • Type G_IDF ';'
    8 FuncDeclaration: • KW_Function Type IDF '(' Parameter_Liste ')' '{' VarInit Instructions Return '}'
    9 ProDeclaration: • KW_Void IDF '(' Parameter_Liste ')' '{' VarInit Instructions '}'
   16 VarInit: • Type Assignment
   22 Type: • KW_int
   23     | • KW_float
   24     | • KW_boolean

    KW_int       shift, and go to state 1
    KW_float     shift, and go to state 2
    KW_boolean   shift, and go to state 3
    KW_Void      shift, and go to state 4
    KW_Function  shift, and go to state 5

    $default  reduce using rule 2 (Declarations_Liste)

    Declarations_Liste  go to state 21
    VarDeclaration      go to state 8
    FuncDeclaration     go to state 9
    ProDeclaration      go to state 10
    VarInit             go to state 11
    Type                go to state 12


State 12

    7 VarDeclaration: Type • G_IDF ';'
   16 VarInit: Type • Assignment
   17 Assignment: • G_IDF SC_ASSIGN INT ';'
   18           | • G_IDF SC_ASSIGN FLOAT ';'
   19           | • G_IDF SC_ASSIGN BOOL ';'
   20 G_IDF: • G_IDF ',' IDF
   21      | • IDF

    IDF  shift, and go to state 22

    Assignment  go to state 23
    G_IDF       go to state 24


State 13

    9 ProDeclaration: KW_Void IDF • '(' Parameter_Liste ')' '{' VarInit Instructions '}'

    '('  shift, and go to state 25


State 14

    8 FuncDeclaration: KW_Function Type • IDF '(' Parameter_Liste ')' '{' VarInit Instructions Return '}'

    IDF  shift, and go to state 26


State 15

    0 $accept: Prog $end •

    $default  accept


State 16

   17 Assignment: • G_IDF SC_ASSIGN INT ';'
   18           | • G_IDF SC_ASSIGN FLOAT ';'
   19           | • G_IDF SC_ASSIGN BOOL ';'
   20 G_IDF: • G_IDF ',' IDF
   21      | • IDF
   25 Instructions_Liste: KW_BEGIN • Instructions KW_END
   26 Instructions: ε •  [KW_END]
   27             | • Assignment Instructions
   28             | • For Instructions
   29             | • If Instructions
   30             | • Div Instructions
   31             | • Mult Instructions
   32             | • Add Instructions
   33             | • Sub Instructions
   34             | • Mod Instructions
   35             | • Increment ';' Instructions
   36             | • Decrement ';' Instructions
   37             | • FuncCall Instructions
   38             | • ProCall Instructions
   39 ArithmeticOp: • UnaryPlus
   40             | • UnaryMinus
   41             | • Div
   42             | • Mult
   43             | • Add
   44             | • Sub
   45             | • Mod
   46 UnaryPlus: • '+' OpSide
   47 UnaryMinus: • '-' OpSide
   48 Div: • OpSide '/' OpSide
   49 Mult: • OpSide '*' OpSide
   50 Add: • OpSide '+' OpSide
   51 Sub: • OpSide '-' OpSide
   52 Mod: • OpSide '%' OpSide
   53 Increment: • IDF SC_INCR
   54 Decrement: • IDF SC_DECR
   63 OpSide: • IDF
   64       | • Num
   65       | • ArithmeticOp
   66       | • FuncCall
   69 Num: • INT
   70    | • FLOAT
   71 For: • KW_For '(' IDF SC_ASSIGN INT ';' Expression ';' Increment ')' '{' Instructions '}'
   72 If: • KW_If Condition '{' Instructions '}'
   73   | • KW_If Condition '{' Instructions '}' KW_Else '{' Instructions '}'
   74 FuncCall: • KW_Fc IDF '(' Args_Liste ')' ';'
   75 ProCall: • KW_Pc IDF '(' Args_Liste ')' ';'

    INT     shift, and go to state 27
    FLOAT   shift, and go to state 28
    IDF     shift, and go to state 29
    KW_For  shift, and go to state 30
    KW_If   shift, and go to state 31
    KW_Pc   shift, and go to state 32
    KW_Fc   shift, and go to state 33
    '+'     shift, and go to state 34
    '-'     shift, and go to state 35

    $default  reduce using rule 26 (Instructions)

    Assignment    go to state 36
    G_IDF         go to state 37
    Instructions  go to state 38
    ArithmeticOp  go to state 39
    UnaryPlus     go to state 40
    UnaryMinus    go to state 41
    Div           go to state 42
    Mult          go to state 43
    Add           go to state 44
    Sub           go to state 45
    Mod           go to state 46
    Increment     go to state 47
    Decrement     go to state 48
    OpSide        go to state 49
    Num           go to state 50
    For           go to state 51
    If            go to state 52
    FuncCall      go to state 53
    ProCall       go to state 54


State 17

    1 Prog: Declarations_Liste Instructions_Liste •

    $default  reduce using rule 1 (Prog)


State 18

    6 Declarations_Liste: VarDeclaration Declarations_Liste •

    $default  reduce using rule 6 (Declarations_Liste)


State 19

    4 Declarations_Liste: FuncDeclaration Declarations_Liste •

    $default  reduce using rule 4 (Declarations_Liste)


State 20

    5 Declarations_Liste: ProDeclaration Declarations_Liste •

    $default  reduce using rule 5 (Declarations_Liste)


State 21

    3 Declarations_Liste: VarInit Declarations_Liste •

    $default  reduce using rule 3 (Declarations_Liste)


State 22

   21 G_IDF: IDF •

    $default  reduce using rule 21 (G_IDF)


State 23

   16 VarInit: Type Assignment •

    $default  reduce using rule 16 (VarInit)


State 24

    7 VarDeclaration: Type G_IDF • ';'
   17 Assignment: G_IDF • SC_ASSIGN INT ';'
   18           | G_IDF • SC_ASSIGN FLOAT ';'
   19           | G_IDF • SC_ASSIGN BOOL ';'
   20 G_IDF: G_IDF • ',' IDF

    SC_ASSIGN  shift, and go to state 55
    ';'        shift, and go to state 56
    ','        shift, and go to state 57


State 25

    9 ProDeclaration: KW_Void IDF '(' • Parameter_Liste ')' '{' VarInit Instructions '}'
   10 Parameter_Liste: ε •  [')']
   11                | • Type IDF ',' Parameter_Liste
   22 Type: • KW_int
   23     | • KW_float
   24     | • KW_boolean

    KW_int      shift, and go to state 1
    KW_float    shift, and go to state 2
    KW_boolean  shift, and go to state 3

    $default  reduce using rule 10 (Parameter_Liste)

    Parameter_Liste  go to state 58
    Type             go to state 59


State 26

    8 FuncDeclaration: KW_Function Type IDF • '(' Parameter_Liste ')' '{' VarInit Instructions Return '}'

    '('  shift, and go to state 60


State 27

   69 Num: INT •

    $default  reduce using rule 69 (Num)


State 28

   70 Num: FLOAT •

    $default  reduce using rule 70 (Num)


State 29

   21 G_IDF: IDF •  [SC_ASSIGN, ',']
   53 Increment: IDF • SC_INCR
   54 Decrement: IDF • SC_DECR
   63 OpSide: IDF •  ['+', '-', '*', '/', '%']

    SC_INCR  shift, and go to state 61
    SC_DECR  shift, and go to state 62

    SC_ASSIGN  reduce using rule 21 (G_IDF)
    ','        reduce using rule 21 (G_IDF)
    $default   reduce using rule 63 (OpSide)


State 30

   71 For: KW_For • '(' IDF SC_ASSIGN INT ';' Expression ';' Increment ')' '{' Instructions '}'

    '('  shift, and go to state 63


State 31

   67 Condition: • '(' Expression ')'
   72 If: KW_If • Condition '{' Instructions '}'
   73   | KW_If • Condition '{' Instructions '}' KW_Else '{' Instructions '}'

    '('  shift, and go to state 64

    Condition  go to state 65


State 32

   75 ProCall: KW_Pc • IDF '(' Args_Liste ')' ';'

    IDF  shift, and go to state 66


State 33

   74 FuncCall: KW_Fc • IDF '(' Args_Liste ')' ';'

    IDF  shift, and go to state 67


State 34

   39 ArithmeticOp: • UnaryPlus
   40             | • UnaryMinus
   41             | • Div
   42             | • Mult
   43             | • Add
   44             | • Sub
   45             | • Mod
   46 UnaryPlus: • '+' OpSide
   46          | '+' • OpSide
   47 UnaryMinus: • '-' OpSide
   48 Div: • OpSide '/' OpSide
   49 Mult: • OpSide '*' OpSide
   50 Add: • OpSide '+' OpSide
   51 Sub: • OpSide '-' OpSide
   52 Mod: • OpSide '%' OpSide
   63 OpSide: • IDF
   64       | • Num
   65       | • ArithmeticOp
   66       | • FuncCall
   69 Num: • INT
   70    | • FLOAT
   74 FuncCall: • KW_Fc IDF '(' Args_Liste ')' ';'

    INT    shift, and go to state 27
    FLOAT  shift, and go to state 28
    IDF    shift, and go to state 68
    KW_Fc  shift, and go to state 33
    '+'    shift, and go to state 34
    '-'    shift, and go to state 35

    ArithmeticOp  go to state 39
    UnaryPlus     go to state 40
    UnaryMinus    go to state 41
    Div           go to state 69
    Mult          go to state 70
    Add           go to state 71
    Sub           go to state 72
    Mod           go to state 73
    OpSide        go to state 74
    Num           go to state 50
    FuncCall      go to state 75


State 35

   39 ArithmeticOp: • UnaryPlus
   40             | • UnaryMinus
   41             | • Div
   42             | • Mult
   43             | • Add
   44             | • Sub
   45             | • Mod
   46 UnaryPlus: • '+' OpSide
   47 UnaryMinus: • '-' OpSide
   47           | '-' • OpSide
   48 Div: • OpSide '/' OpSide
   49 Mult: • OpSide '*' OpSide
   50 Add: • OpSide '+' OpSide
   51 Sub: • OpSide '-' OpSide
   52 Mod: • OpSide '%' OpSide
   63 OpSide: • IDF
   64       | • Num
   65       | • ArithmeticOp
   66       | • FuncCall
   69 Num: • INT
   70    | • FLOAT
   74 FuncCall: • KW_Fc IDF '(' Args_Liste ')' ';'

    INT    shift, and go to state 27
    FLOAT  shift, and go to state 28
    IDF    shift, and go to state 68
    KW_Fc  shift, and go to state 33
    '+'    shift, and go to state 34
    '-'    shift, and go to state 35

    ArithmeticOp  go to state 39
    UnaryPlus     go to state 40
    UnaryMinus    go to state 41
    Div           go to state 69
    Mult          go to state 70
    Add           go to state 71
    Sub           go to state 72
    Mod           go to state 73
    OpSide        go to state 76
    Num           go to state 50
    FuncCall      go to state 75


State 36

   17 Assignment: • G_IDF SC_ASSIGN INT ';'
   18           | • G_IDF SC_ASSIGN FLOAT ';'
   19           | • G_IDF SC_ASSIGN BOOL ';'
   20 G_IDF: • G_IDF ',' IDF
   21      | • IDF
   26 Instructions: ε •  [KW_END, KW_Return, '}']
   27             | • Assignment Instructions
   27             | Assignment • Instructions
   28             | • For Instructions
   29             | • If Instructions
   30             | • Div Instructions
   31             | • Mult Instructions
   32             | • Add Instructions
   33             | • Sub Instructions
   34             | • Mod Instructions
   35             | • Increment ';' Instructions
   36             | • Decrement ';' Instructions
   37             | • FuncCall Instructions
   38             | • ProCall Instructions
   39 ArithmeticOp: • UnaryPlus
   40             | • UnaryMinus
   41             | • Div
   42             | • Mult
   43             | • Add
   44             | • Sub
   45             | • Mod
   46 UnaryPlus: • '+' OpSide
   47 UnaryMinus: • '-' OpSide
   48 Div: • OpSide '/' OpSide
   49 Mult: • OpSide '*' OpSide
   50 Add: • OpSide '+' OpSide
   51 Sub: • OpSide '-' OpSide
   52 Mod: • OpSide '%' OpSide
   53 Increment: • IDF SC_INCR
   54 Decrement: • IDF SC_DECR
   63 OpSide: • IDF
   64       | • Num
   65       | • ArithmeticOp
   66       | • FuncCall
   69 Num: • INT
   70    | • FLOAT
   71 For: • KW_For '(' IDF SC_ASSIGN INT ';' Expression ';' Increment ')' '{' Instructions '}'
   72 If: • KW_If Condition '{' Instructions '}'
   73   | • KW_If Condition '{' Instructions '}' KW_Else '{' Instructions '}'
   74 FuncCall: • KW_Fc IDF '(' Args_Liste ')' ';'
   75 ProCall: • KW_Pc IDF '(' Args_Liste ')' ';'

    INT     shift, and go to state 27
    FLOAT   shift, and go to state 28
    IDF     shift, and go to state 29
    KW_For  shift, and go to state 30
    KW_If   shift, and go to state 31
    KW_Pc   shift, and go to state 32
    KW_Fc   shift, and go to state 33
    '+'     shift, and go to state 34
    '-'     shift, and go to state 35

    $default  reduce using rule 26 (Instructions)

    Assignment    go to state 36
    G_IDF         go to state 37
    Instructions  go to state 77
    ArithmeticOp  go to state 39
    UnaryPlus     go to state 40
    UnaryMinus    go to state 41
    Div           go to state 42
    Mult          go to state 43
    Add           go to state 44
    Sub           go to state 45
    Mod           go to state 46
    Increment     go to state 47
    Decrement     go to state 48
    OpSide        go to state 49
    Num           go to state 50
    For           go to state 51
    If            go to state 52
    FuncCall      go to state 53
    ProCall       go to state 54


State 37

   17 Assignment: G_IDF • SC_ASSIGN INT ';'
   18           | G_IDF • SC_ASSIGN FLOAT ';'
   19           | G_IDF • SC_ASSIGN BOOL ';'
   20 G_IDF: G_IDF • ',' IDF

    SC_ASSIGN  shift, and go to state 55
    ','        shift, and go to state 57


State 38

   25 Instructions_Liste: KW_BEGIN Instructions • KW_END

    KW_END  shift, and go to state 78


State 39

   65 OpSide: ArithmeticOp •

    $default  reduce using rule 65 (OpSide)


State 40

   39 ArithmeticOp: UnaryPlus •

    $default  reduce using rule 39 (ArithmeticOp)


State 41

   40 ArithmeticOp: UnaryMinus •

    $default  reduce using rule 40 (ArithmeticOp)


State 42

   17 Assignment: • G_IDF SC_ASSIGN INT ';'
   18           | • G_IDF SC_ASSIGN FLOAT ';'
   19           | • G_IDF SC_ASSIGN BOOL ';'
   20 G_IDF: • G_IDF ',' IDF
   21      | • IDF
   26 Instructions: ε •  [KW_END, KW_Return, '}']
   27             | • Assignment Instructions
   28             | • For Instructions
   29             | • If Instructions
   30             | • Div Instructions
   30             | Div • Instructions
   31             | • Mult Instructions
   32             | • Add Instructions
   33             | • Sub Instructions
   34             | • Mod Instructions
   35             | • Increment ';' Instructions
   36             | • Decrement ';' Instructions
   37             | • FuncCall Instructions
   38             | • ProCall Instructions
   39 ArithmeticOp: • UnaryPlus
   40             | • UnaryMinus
   41             | • Div
   41             | Div •  ['+', '-', '*', '/', '%']
   42             | • Mult
   43             | • Add
   44             | • Sub
   45             | • Mod
   46 UnaryPlus: • '+' OpSide
   47 UnaryMinus: • '-' OpSide
   48 Div: • OpSide '/' OpSide
   49 Mult: • OpSide '*' OpSide
   50 Add: • OpSide '+' OpSide
   51 Sub: • OpSide '-' OpSide
   52 Mod: • OpSide '%' OpSide
   53 Increment: • IDF SC_INCR
   54 Decrement: • IDF SC_DECR
   63 OpSide: • IDF
   64       | • Num
   65       | • ArithmeticOp
   66       | • FuncCall
   69 Num: • INT
   70    | • FLOAT
   71 For: • KW_For '(' IDF SC_ASSIGN INT ';' Expression ';' Increment ')' '{' Instructions '}'
   72 If: • KW_If Condition '{' Instructions '}'
   73   | • KW_If Condition '{' Instructions '}' KW_Else '{' Instructions '}'
   74 FuncCall: • KW_Fc IDF '(' Args_Liste ')' ';'
   75 ProCall: • KW_Pc IDF '(' Args_Liste ')' ';'

    INT     shift, and go to state 27
    FLOAT   shift, and go to state 28
    IDF     shift, and go to state 29
    KW_For  shift, and go to state 30
    KW_If   shift, and go to state 31
    KW_Pc   shift, and go to state 32
    KW_Fc   shift, and go to state 33
    '+'     shift, and go to state 34
    '-'     shift, and go to state 35

    '+'       [reduce using rule 41 (ArithmeticOp)]
    '-'       [reduce using rule 41 (ArithmeticOp)]
    '*'       reduce using rule 41 (ArithmeticOp)
    '/'       reduce using rule 41 (ArithmeticOp)
    '%'       reduce using rule 41 (ArithmeticOp)
    $default  reduce using rule 26 (Instructions)

    Assignment    go to state 36
    G_IDF         go to state 37
    Instructions  go to state 79
    ArithmeticOp  go to state 39
    UnaryPlus     go to state 40
    UnaryMinus    go to state 41
    Div           go to state 42
    Mult          go to state 43
    Add           go to state 44
    Sub           go to state 45
    Mod           go to state 46
    Increment     go to state 47
    Decrement     go to state 48
    OpSide        go to state 49
    Num           go to state 50
    For           go to state 51
    If            go to state 52
    FuncCall      go to state 53
    ProCall       go to state 54

    shift/reduce conflict on token '+':
       41 ArithmeticOp: Div •
       46 UnaryPlus: • '+' OpSide
      First example: OpSide '/' OpSide Instructions
      Shift derivation
        Instructions
        ↳ 30: OpSide Instructions
                     ↳ 30: Div              Instructions
                           ↳ 48: '/' OpSide
      Second example: Instructions
      Reduce derivation
        Instructions
        ↳ 30: Instructions

    shift/reduce conflict on token '-':
       41 ArithmeticOp: Div •
       47 UnaryMinus: • '-' OpSide
      First example: OpSide '/' OpSide Instructions
      Shift derivation
        Instructions
        ↳ 30: OpSide Instructions
                     ↳ 30: Div              Instructions
                           ↳ 48: '/' OpSide
      Second example: Instructions
      Reduce derivation
        Instructions
        ↳ 30: Instructions



State 43

   17 Assignment: • G_IDF SC_ASSIGN INT ';'
   18           | • G_IDF SC_ASSIGN FLOAT ';'
   19           | • G_IDF SC_ASSIGN BOOL ';'
   20 G_IDF: • G_IDF ',' IDF
   21      | • IDF
   26 Instructions: ε •  [KW_END, KW_Return, '}']
   27             | • Assignment Instructions
   28             | • For Instructions
   29             | • If Instructions
   30             | • Div Instructions
   31             | • Mult Instructions
   31             | Mult • Instructions
   32             | • Add Instructions
   33             | • Sub Instructions
   34             | • Mod Instructions
   35             | • Increment ';' Instructions
   36             | • Decrement ';' Instructions
   37             | • FuncCall Instructions
   38             | • ProCall Instructions
   39 ArithmeticOp: • UnaryPlus
   40             | • UnaryMinus
   41             | • Div
   42             | • Mult
   42             | Mult •  ['+', '-', '*', '/', '%']
   43             | • Add
   44             | • Sub
   45             | • Mod
   46 UnaryPlus: • '+' OpSide
   47 UnaryMinus: • '-' OpSide
   48 Div: • OpSide '/' OpSide
   49 Mult: • OpSide '*' OpSide
   50 Add: • OpSide '+' OpSide
   51 Sub: • OpSide '-' OpSide
   52 Mod: • OpSide '%' OpSide
   53 Increment: • IDF SC_INCR
   54 Decrement: • IDF SC_DECR
   63 OpSide: • IDF
   64       | • Num
   65       | • ArithmeticOp
   66       | • FuncCall
   69 Num: • INT
   70    | • FLOAT
   71 For: • KW_For '(' IDF SC_ASSIGN INT ';' Expression ';' Increment ')' '{' Instructions '}'
   72 If: • KW_If Condition '{' Instructions '}'
   73   | • KW_If Condition '{' Instructions '}' KW_Else '{' Instructions '}'
   74 FuncCall: • KW_Fc IDF '(' Args_Liste ')' ';'
   75 ProCall: • KW_Pc IDF '(' Args_Liste ')' ';'

    INT     shift, and go to state 27
    FLOAT   shift, and go to state 28
    IDF     shift, and go to state 29
    KW_For  shift, and go to state 30
    KW_If   shift, and go to state 31
    KW_Pc   shift, and go to state 32
    KW_Fc   shift, and go to state 33
    '+'     shift, and go to state 34
    '-'     shift, and go to state 35

    '+'       [reduce using rule 42 (ArithmeticOp)]
    '-'       [reduce using rule 42 (ArithmeticOp)]
    '*'       reduce using rule 42 (ArithmeticOp)
    '/'       reduce using rule 42 (ArithmeticOp)
    '%'       reduce using rule 42 (ArithmeticOp)
    $default  reduce using rule 26 (Instructions)

    Assignment    go to state 36
    G_IDF         go to state 37
    Instructions  go to state 80
    ArithmeticOp  go to state 39
    UnaryPlus     go to state 40
    UnaryMinus    go to state 41
    Div           go to state 42
    Mult          go to state 43
    Add           go to state 44
    Sub           go to state 45
    Mod           go to state 46
    Increment     go to state 47
    Decrement     go to state 48
    OpSide        go to state 49
    Num           go to state 50
    For           go to state 51
    If            go to state 52
    FuncCall      go to state 53
    ProCall       go to state 54

    shift/reduce conflict on token '+':
       42 ArithmeticOp: Mult •
       46 UnaryPlus: • '+' OpSide
      First example: • '+' OpSide Instructions
      Shift derivation
        Instructions
        ↳ 31: OpSide                         Instructions
              ↳ 65: ArithmeticOp             ↳ 31: Instructions
                    ↳ 39: UnaryPlus
                          ↳ 46: • '+' OpSide
      Second example: Mult • '+' OpSide
      Reduce derivation
        Instructions
        ↳ 31: Instructions
              ↳ 32: Add                                 Instructions
                    ↳ 50: OpSide             '+' OpSide ↳ 32: ε
                          ↳ 65: ArithmeticOp
                                ↳ 42: Mult •

    shift/reduce conflict on token '-':
       42 ArithmeticOp: Mult •
       47 UnaryMinus: • '-' OpSide
      First example: • '-' OpSide Instructions
      Shift derivation
        Instructions
        ↳ 31: OpSide                         Instructions
              ↳ 65: ArithmeticOp             ↳ 31: Instructions
                    ↳ 40: UnaryMinus
                          ↳ 47: • '-' OpSide
      Second example: Mult • '-' OpSide
      Reduce derivation
        Instructions
        ↳ 31: Instructions
              ↳ 33: Sub                                 Instructions
                    ↳ 51: OpSide             '-' OpSide ↳ 33: ε
                          ↳ 65: ArithmeticOp
                                ↳ 42: Mult •



State 44

   17 Assignment: • G_IDF SC_ASSIGN INT ';'
   18           | • G_IDF SC_ASSIGN FLOAT ';'
   19           | • G_IDF SC_ASSIGN BOOL ';'
   20 G_IDF: • G_IDF ',' IDF
   21      | • IDF
   26 Instructions: ε •  [KW_END, KW_Return, '}']
   27             | • Assignment Instructions
   28             | • For Instructions
   29             | • If Instructions
   30             | • Div Instructions
   31             | • Mult Instructions
   32             | • Add Instructions
   32             | Add • Instructions
   33             | • Sub Instructions
   34             | • Mod Instructions
   35             | • Increment ';' Instructions
   36             | • Decrement ';' Instructions
   37             | • FuncCall Instructions
   38             | • ProCall Instructions
   39 ArithmeticOp: • UnaryPlus
   40             | • UnaryMinus
   41             | • Div
   42             | • Mult
   43             | • Add
   43             | Add •  ['+', '-', '*', '/', '%']
   44             | • Sub
   45             | • Mod
   46 UnaryPlus: • '+' OpSide
   47 UnaryMinus: • '-' OpSide
   48 Div: • OpSide '/' OpSide
   49 Mult: • OpSide '*' OpSide
   50 Add: • OpSide '+' OpSide
   51 Sub: • OpSide '-' OpSide
   52 Mod: • OpSide '%' OpSide
   53 Increment: • IDF SC_INCR
   54 Decrement: • IDF SC_DECR
   63 OpSide: • IDF
   64       | • Num
   65       | • ArithmeticOp
   66       | • FuncCall
   69 Num: • INT
   70    | • FLOAT
   71 For: • KW_For '(' IDF SC_ASSIGN INT ';' Expression ';' Increment ')' '{' Instructions '}'
   72 If: • KW_If Condition '{' Instructions '}'
   73   | • KW_If Condition '{' Instructions '}' KW_Else '{' Instructions '}'
   74 FuncCall: • KW_Fc IDF '(' Args_Liste ')' ';'
   75 ProCall: • KW_Pc IDF '(' Args_Liste ')' ';'

    INT     shift, and go to state 27
    FLOAT   shift, and go to state 28
    IDF     shift, and go to state 29
    KW_For  shift, and go to state 30
    KW_If   shift, and go to state 31
    KW_Pc   shift, and go to state 32
    KW_Fc   shift, and go to state 33
    '+'     shift, and go to state 34
    '-'     shift, and go to state 35

    '+'       [reduce using rule 43 (ArithmeticOp)]
    '-'       [reduce using rule 43 (ArithmeticOp)]
    '*'       reduce using rule 43 (ArithmeticOp)
    '/'       reduce using rule 43 (ArithmeticOp)
    '%'       reduce using rule 43 (ArithmeticOp)
    $default  reduce using rule 26 (Instructions)

    Assignment    go to state 36
    G_IDF         go to state 37
    Instructions  go to state 81
    ArithmeticOp  go to state 39
    UnaryPlus     go to state 40
    UnaryMinus    go to state 41
    Div           go to state 42
    Mult          go to state 43
    Add           go to state 44
    Sub           go to state 45
    Mod           go to state 46
    Increment     go to state 47
    Decrement     go to state 48
    OpSide        go to state 49
    Num           go to state 50
    For           go to state 51
    If            go to state 52
    FuncCall      go to state 53
    ProCall       go to state 54

    shift/reduce conflict on token '+':
       43 ArithmeticOp: Add •
       46 UnaryPlus: • '+' OpSide
      First example: • '+' OpSide
      Shift derivation
        Instructions
        ↳ 32: UnaryPlus
              ↳ 46: • '+' OpSide
      Second example: 
      Reduce derivation
        Instructions
        ↳ 32: Instructions
              ↳ 32: ε

    shift/reduce conflict on token '-':
       43 ArithmeticOp: Add •
       47 UnaryMinus: • '-' OpSide
      First example: • '-' OpSide Instructions
      Shift derivation
        Instructions
        ↳ 32: OpSide                         Instructions
              ↳ 65: ArithmeticOp             ↳ 32: Instructions
                    ↳ 40: UnaryMinus
                          ↳ 47: • '-' OpSide
      Second example: Add • '-' OpSide
      Reduce derivation
        Instructions
        ↳ 32: Instructions
              ↳ 33: Sub                                 Instructions
                    ↳ 51: OpSide             '-' OpSide ↳ 33: ε
                          ↳ 65: ArithmeticOp
                                ↳ 43: Add •



State 45

   17 Assignment: • G_IDF SC_ASSIGN INT ';'
   18           | • G_IDF SC_ASSIGN FLOAT ';'
   19           | • G_IDF SC_ASSIGN BOOL ';'
   20 G_IDF: • G_IDF ',' IDF
   21      | • IDF
   26 Instructions: ε •  [KW_END, KW_Return, '}']
   27             | • Assignment Instructions
   28             | • For Instructions
   29             | • If Instructions
   30             | • Div Instructions
   31             | • Mult Instructions
   32             | • Add Instructions
   33             | • Sub Instructions
   33             | Sub • Instructions
   34             | • Mod Instructions
   35             | • Increment ';' Instructions
   36             | • Decrement ';' Instructions
   37             | • FuncCall Instructions
   38             | • ProCall Instructions
   39 ArithmeticOp: • UnaryPlus
   40             | • UnaryMinus
   41             | • Div
   42             | • Mult
   43             | • Add
   44             | • Sub
   44             | Sub •  ['+', '-', '*', '/', '%']
   45             | • Mod
   46 UnaryPlus: • '+' OpSide
   47 UnaryMinus: • '-' OpSide
   48 Div: • OpSide '/' OpSide
   49 Mult: • OpSide '*' OpSide
   50 Add: • OpSide '+' OpSide
   51 Sub: • OpSide '-' OpSide
   52 Mod: • OpSide '%' OpSide
   53 Increment: • IDF SC_INCR
   54 Decrement: • IDF SC_DECR
   63 OpSide: • IDF
   64       | • Num
   65       | • ArithmeticOp
   66       | • FuncCall
   69 Num: • INT
   70    | • FLOAT
   71 For: • KW_For '(' IDF SC_ASSIGN INT ';' Expression ';' Increment ')' '{' Instructions '}'
   72 If: • KW_If Condition '{' Instructions '}'
   73   | • KW_If Condition '{' Instructions '}' KW_Else '{' Instructions '}'
   74 FuncCall: • KW_Fc IDF '(' Args_Liste ')' ';'
   75 ProCall: • KW_Pc IDF '(' Args_Liste ')' ';'

    INT     shift, and go to state 27
    FLOAT   shift, and go to state 28
    IDF     shift, and go to state 29
    KW_For  shift, and go to state 30
    KW_If   shift, and go to state 31
    KW_Pc   shift, and go to state 32
    KW_Fc   shift, and go to state 33
    '+'     shift, and go to state 34
    '-'     shift, and go to state 35

    '+'       [reduce using rule 44 (ArithmeticOp)]
    '-'       [reduce using rule 44 (ArithmeticOp)]
    '*'       reduce using rule 44 (ArithmeticOp)
    '/'       reduce using rule 44 (ArithmeticOp)
    '%'       reduce using rule 44 (ArithmeticOp)
    $default  reduce using rule 26 (Instructions)

    Assignment    go to state 36
    G_IDF         go to state 37
    Instructions  go to state 82
    ArithmeticOp  go to state 39
    UnaryPlus     go to state 40
    UnaryMinus    go to state 41
    Div           go to state 42
    Mult          go to state 43
    Add           go to state 44
    Sub           go to state 45
    Mod           go to state 46
    Increment     go to state 47
    Decrement     go to state 48
    OpSide        go to state 49
    Num           go to state 50
    For           go to state 51
    If            go to state 52
    FuncCall      go to state 53
    ProCall       go to state 54

    shift/reduce conflict on token '+':
       44 ArithmeticOp: Sub •
       46 UnaryPlus: • '+' OpSide
      First example: • '+' OpSide Instructions
      Shift derivation
        Instructions
        ↳ 33: OpSide                         Instructions
              ↳ 65: ArithmeticOp             ↳ 33: Instructions
                    ↳ 39: UnaryPlus
                          ↳ 46: • '+' OpSide
      Second example: Sub • '+' OpSide
      Reduce derivation
        Instructions
        ↳ 33: Instructions
              ↳ 32: Add                                 Instructions
                    ↳ 50: OpSide             '+' OpSide ↳ 32: ε
                          ↳ 65: ArithmeticOp
                                ↳ 44: Sub •

    shift/reduce conflict on token '-':
       44 ArithmeticOp: Sub •
       47 UnaryMinus: • '-' OpSide
      First example: • '-' OpSide
      Shift derivation
        Instructions
        ↳ 33: UnaryMinus
              ↳ 47: • '-' OpSide
      Second example: 
      Reduce derivation
        Instructions
        ↳ 33: Instructions
              ↳ 33: ε



State 46

   17 Assignment: • G_IDF SC_ASSIGN INT ';'
   18           | • G_IDF SC_ASSIGN FLOAT ';'
   19           | • G_IDF SC_ASSIGN BOOL ';'
   20 G_IDF: • G_IDF ',' IDF
   21      | • IDF
   26 Instructions: ε •  [KW_END, KW_Return, '}']
   27             | • Assignment Instructions
   28             | • For Instructions
   29             | • If Instructions
   30             | • Div Instructions
   31             | • Mult Instructions
   32             | • Add Instructions
   33             | • Sub Instructions
   34             | • Mod Instructions
   34             | Mod • Instructions
   35             | • Increment ';' Instructions
   36             | • Decrement ';' Instructions
   37             | • FuncCall Instructions
   38             | • ProCall Instructions
   39 ArithmeticOp: • UnaryPlus
   40             | • UnaryMinus
   41             | • Div
   42             | • Mult
   43             | • Add
   44             | • Sub
   45             | • Mod
   45             | Mod •  ['+', '-', '*', '/', '%']
   46 UnaryPlus: • '+' OpSide
   47 UnaryMinus: • '-' OpSide
   48 Div: • OpSide '/' OpSide
   49 Mult: • OpSide '*' OpSide
   50 Add: • OpSide '+' OpSide
   51 Sub: • OpSide '-' OpSide
   52 Mod: • OpSide '%' OpSide
   53 Increment: • IDF SC_INCR
   54 Decrement: • IDF SC_DECR
   63 OpSide: • IDF
   64       | • Num
   65       | • ArithmeticOp
   66       | • FuncCall
   69 Num: • INT
   70    | • FLOAT
   71 For: • KW_For '(' IDF SC_ASSIGN INT ';' Expression ';' Increment ')' '{' Instructions '}'
   72 If: • KW_If Condition '{' Instructions '}'
   73   | • KW_If Condition '{' Instructions '}' KW_Else '{' Instructions '}'
   74 FuncCall: • KW_Fc IDF '(' Args_Liste ')' ';'
   75 ProCall: • KW_Pc IDF '(' Args_Liste ')' ';'

    INT     shift, and go to state 27
    FLOAT   shift, and go to state 28
    IDF     shift, and go to state 29
    KW_For  shift, and go to state 30
    KW_If   shift, and go to state 31
    KW_Pc   shift, and go to state 32
    KW_Fc   shift, and go to state 33
    '+'     shift, and go to state 34
    '-'     shift, and go to state 35

    '+'       [reduce using rule 45 (ArithmeticOp)]
    '-'       [reduce using rule 45 (ArithmeticOp)]
    '*'       reduce using rule 45 (ArithmeticOp)
    '/'       reduce using rule 45 (ArithmeticOp)
    '%'       reduce using rule 45 (ArithmeticOp)
    $default  reduce using rule 26 (Instructions)

    Assignment    go to state 36
    G_IDF         go to state 37
    Instructions  go to state 83
    ArithmeticOp  go to state 39
    UnaryPlus     go to state 40
    UnaryMinus    go to state 41
    Div           go to state 42
    Mult          go to state 43
    Add           go to state 44
    Sub           go to state 45
    Mod           go to state 46
    Increment     go to state 47
    Decrement     go to state 48
    OpSide        go to state 49
    Num           go to state 50
    For           go to state 51
    If            go to state 52
    FuncCall      go to state 53
    ProCall       go to state 54

    shift/reduce conflict on token '+':
       45 ArithmeticOp: Mod •
       46 UnaryPlus: • '+' OpSide
      First example: • '+' OpSide Instructions
      Shift derivation
        Instructions
        ↳ 34: OpSide                         Instructions
              ↳ 65: ArithmeticOp             ↳ 34: Instructions
                    ↳ 39: UnaryPlus
                          ↳ 46: • '+' OpSide
      Second example: Mod • '+' OpSide
      Reduce derivation
        Instructions
        ↳ 34: Instructions
              ↳ 32: Add                                 Instructions
                    ↳ 50: OpSide             '+' OpSide ↳ 32: ε
                          ↳ 65: ArithmeticOp
                                ↳ 45: Mod •

    shift/reduce conflict on token '-':
       45 ArithmeticOp: Mod •
       47 UnaryMinus: • '-' OpSide
      First example: • '-' OpSide Instructions
      Shift derivation
        Instructions
        ↳ 34: OpSide                         Instructions
              ↳ 65: ArithmeticOp             ↳ 34: Instructions
                    ↳ 40: UnaryMinus
                          ↳ 47: • '-' OpSide
      Second example: Mod • '-' OpSide
      Reduce derivation
        Instructions
        ↳ 34: Instructions
              ↳ 33: Sub                                 Instructions
                    ↳ 51: OpSide             '-' OpSide ↳ 33: ε
                          ↳ 65: ArithmeticOp
                                ↳ 45: Mod •



State 47

   35 Instructions: Increment • ';' Instructions

    ';'  shift, and go to state 84


State 48

   36 Instructions: Decrement • ';' Instructions

    ';'  shift, and go to state 85


State 49

   48 Div: OpSide • '/' OpSide
   49 Mult: OpSide • '*' OpSide
   50 Add: OpSide • '+' OpSide
   51 Sub: OpSide • '-' OpSide
   52 Mod: OpSide • '%' OpSide

    '+'  shift, and go to state 86
    '-'  shift, and go to state 87
    '*'  shift, and go to state 88
    '/'  shift, and go to state 89
    '%'  shift, and go to state 90


State 50

   64 OpSide: Num •

    $default  reduce using rule 64 (OpSide)


State 51

   17 Assignment: • G_IDF SC_ASSIGN INT ';'
   18           | • G_IDF SC_ASSIGN FLOAT ';'
   19           | • G_IDF SC_ASSIGN BOOL ';'
   20 G_IDF: • G_IDF ',' IDF
   21      | • IDF
   26 Instructions: ε •  [KW_END, KW_Return, '}']
   27             | • Assignment Instructions
   28             | • For Instructions
   28             | For • Instructions
   29             | • If Instructions
   30             | • Div Instructions
   31             | • Mult Instructions
   32             | • Add Instructions
   33             | • Sub Instructions
   34             | • Mod Instructions
   35             | • Increment ';' Instructions
   36             | • Decrement ';' Instructions
   37             | • FuncCall Instructions
   38             | • ProCall Instructions
   39 ArithmeticOp: • UnaryPlus
   40             | • UnaryMinus
   41             | • Div
   42             | • Mult
   43             | • Add
   44             | • Sub
   45             | • Mod
   46 UnaryPlus: • '+' OpSide
   47 UnaryMinus: • '-' OpSide
   48 Div: • OpSide '/' OpSide
   49 Mult: • OpSide '*' OpSide
   50 Add: • OpSide '+' OpSide
   51 Sub: • OpSide '-' OpSide
   52 Mod: • OpSide '%' OpSide
   53 Increment: • IDF SC_INCR
   54 Decrement: • IDF SC_DECR
   63 OpSide: • IDF
   64       | • Num
   65       | • ArithmeticOp
   66       | • FuncCall
   69 Num: • INT
   70    | • FLOAT
   71 For: • KW_For '(' IDF SC_ASSIGN INT ';' Expression ';' Increment ')' '{' Instructions '}'
   72 If: • KW_If Condition '{' Instructions '}'
   73   | • KW_If Condition '{' Instructions '}' KW_Else '{' Instructions '}'
   74 FuncCall: • KW_Fc IDF '(' Args_Liste ')' ';'
   75 ProCall: • KW_Pc IDF '(' Args_Liste ')' ';'

    INT     shift, and go to state 27
    FLOAT   shift, and go to state 28
    IDF     shift, and go to state 29
    KW_For  shift, and go to state 30
    KW_If   shift, and go to state 31
    KW_Pc   shift, and go to state 32
    KW_Fc   shift, and go to state 33
    '+'     shift, and go to state 34
    '-'     shift, and go to state 35

    $default  reduce using rule 26 (Instructions)

    Assignment    go to state 36
    G_IDF         go to state 37
    Instructions  go to state 91
    ArithmeticOp  go to state 39
    UnaryPlus     go to state 40
    UnaryMinus    go to state 41
    Div           go to state 42
    Mult          go to state 43
    Add           go to state 44
    Sub           go to state 45
    Mod           go to state 46
    Increment     go to state 47
    Decrement     go to state 48
    OpSide        go to state 49
    Num           go to state 50
    For           go to state 51
    If            go to state 52
    FuncCall      go to state 53
    ProCall       go to state 54


State 52

   17 Assignment: • G_IDF SC_ASSIGN INT ';'
   18           | • G_IDF SC_ASSIGN FLOAT ';'
   19           | • G_IDF SC_ASSIGN BOOL ';'
   20 G_IDF: • G_IDF ',' IDF
   21      | • IDF
   26 Instructions: ε •  [KW_END, KW_Return, '}']
   27             | • Assignment Instructions
   28             | • For Instructions
   29             | • If Instructions
   29             | If • Instructions
   30             | • Div Instructions
   31             | • Mult Instructions
   32             | • Add Instructions
   33             | • Sub Instructions
   34             | • Mod Instructions
   35             | • Increment ';' Instructions
   36             | • Decrement ';' Instructions
   37             | • FuncCall Instructions
   38             | • ProCall Instructions
   39 ArithmeticOp: • UnaryPlus
   40             | • UnaryMinus
   41             | • Div
   42             | • Mult
   43             | • Add
   44             | • Sub
   45             | • Mod
   46 UnaryPlus: • '+' OpSide
   47 UnaryMinus: • '-' OpSide
   48 Div: • OpSide '/' OpSide
   49 Mult: • OpSide '*' OpSide
   50 Add: • OpSide '+' OpSide
   51 Sub: • OpSide '-' OpSide
   52 Mod: • OpSide '%' OpSide
   53 Increment: • IDF SC_INCR
   54 Decrement: • IDF SC_DECR
   63 OpSide: • IDF
   64       | • Num
   65       | • ArithmeticOp
   66       | • FuncCall
   69 Num: • INT
   70    | • FLOAT
   71 For: • KW_For '(' IDF SC_ASSIGN INT ';' Expression ';' Increment ')' '{' Instructions '}'
   72 If: • KW_If Condition '{' Instructions '}'
   73   | • KW_If Condition '{' Instructions '}' KW_Else '{' Instructions '}'
   74 FuncCall: • KW_Fc IDF '(' Args_Liste ')' ';'
   75 ProCall: • KW_Pc IDF '(' Args_Liste ')' ';'

    INT     shift, and go to state 27
    FLOAT   shift, and go to state 28
    IDF     shift, and go to state 29
    KW_For  shift, and go to state 30
    KW_If   shift, and go to state 31
    KW_Pc   shift, and go to state 32
    KW_Fc   shift, and go to state 33
    '+'     shift, and go to state 34
    '-'     shift, and go to state 35

    $default  reduce using rule 26 (Instructions)

    Assignment    go to state 36
    G_IDF         go to state 37
    Instructions  go to state 92
    ArithmeticOp  go to state 39
    UnaryPlus     go to state 40
    UnaryMinus    go to state 41
    Div           go to state 42
    Mult          go to state 43
    Add           go to state 44
    Sub           go to state 45
    Mod           go to state 46
    Increment     go to state 47
    Decrement     go to state 48
    OpSide        go to state 49
    Num           go to state 50
    For           go to state 51
    If            go to state 52
    FuncCall      go to state 53
    ProCall       go to state 54


State 53

   17 Assignment: • G_IDF SC_ASSIGN INT ';'
   18           | • G_IDF SC_ASSIGN FLOAT ';'
   19           | • G_IDF SC_ASSIGN BOOL ';'
   20 G_IDF: • G_IDF ',' IDF
   21      | • IDF
   26 Instructions: ε •  [KW_END, KW_Return, '}']
   27             | • Assignment Instructions
   28             | • For Instructions
   29             | • If Instructions
   30             | • Div Instructions
   31             | • Mult Instructions
   32             | • Add Instructions
   33             | • Sub Instructions
   34             | • Mod Instructions
   35             | • Increment ';' Instructions
   36             | • Decrement ';' Instructions
   37             | • FuncCall Instructions
   37             | FuncCall • Instructions
   38             | • ProCall Instructions
   39 ArithmeticOp: • UnaryPlus
   40             | • UnaryMinus
   41             | • Div
   42             | • Mult
   43             | • Add
   44             | • Sub
   45             | • Mod
   46 UnaryPlus: • '+' OpSide
   47 UnaryMinus: • '-' OpSide
   48 Div: • OpSide '/' OpSide
   49 Mult: • OpSide '*' OpSide
   50 Add: • OpSide '+' OpSide
   51 Sub: • OpSide '-' OpSide
   52 Mod: • OpSide '%' OpSide
   53 Increment: • IDF SC_INCR
   54 Decrement: • IDF SC_DECR
   63 OpSide: • IDF
   64       | • Num
   65       | • ArithmeticOp
   66       | • FuncCall
   66       | FuncCall •  ['+', '-', '*', '/', '%']
   69 Num: • INT
   70    | • FLOAT
   71 For: • KW_For '(' IDF SC_ASSIGN INT ';' Expression ';' Increment ')' '{' Instructions '}'
   72 If: • KW_If Condition '{' Instructions '}'
   73   | • KW_If Condition '{' Instructions '}' KW_Else '{' Instructions '}'
   74 FuncCall: • KW_Fc IDF '(' Args_Liste ')' ';'
   75 ProCall: • KW_Pc IDF '(' Args_Liste ')' ';'

    INT     shift, and go to state 27
    FLOAT   shift, and go to state 28
    IDF     shift, and go to state 29
    KW_For  shift, and go to state 30
    KW_If   shift, and go to state 31
    KW_Pc   shift, and go to state 32
    KW_Fc   shift, and go to state 33
    '+'     shift, and go to state 34
    '-'     shift, and go to state 35

    '+'       [reduce using rule 66 (OpSide)]
    '-'       [reduce using rule 66 (OpSide)]
    '*'       reduce using rule 66 (OpSide)
    '/'       reduce using rule 66 (OpSide)
    '%'       reduce using rule 66 (OpSide)
    $default  reduce using rule 26 (Instructions)

    Assignment    go to state 36
    G_IDF         go to state 37
    Instructions  go to state 93
    ArithmeticOp  go to state 39
    UnaryPlus     go to state 40
    UnaryMinus    go to state 41
    Div           go to state 42
    Mult          go to state 43
    Add           go to state 44
    Sub           go to state 45
    Mod           go to state 46
    Increment     go to state 47
    Decrement     go to state 48
    OpSide        go to state 49
    Num           go to state 50
    For           go to state 51
    If            go to state 52
    FuncCall      go to state 53
    ProCall       go to state 54

    shift/reduce conflict on token '+':
       66 OpSide: FuncCall •
       46 UnaryPlus: • '+' OpSide
      First example: • '+' OpSide Instructions
      Shift derivation
        Instructions
        ↳ 37: OpSide                         Instructions
              ↳ 65: ArithmeticOp             ↳ 37: Instructions
                    ↳ 39: UnaryPlus
                          ↳ 46: • '+' OpSide
      Second example: FuncCall • '+' OpSide
      Reduce derivation
        Instructions
        ↳ 37: Instructions
              ↳ 32: Add                               Instructions
                    ↳ 50: OpSide           '+' OpSide ↳ 32: ε
                          ↳ 66: FuncCall •

    shift/reduce conflict on token '-':
       66 OpSide: FuncCall •
       47 UnaryMinus: • '-' OpSide
      First example: • '-' OpSide Instructions
      Shift derivation
        Instructions
        ↳ 37: OpSide                         Instructions
              ↳ 65: ArithmeticOp             ↳ 37: Instructions
                    ↳ 40: UnaryMinus
                          ↳ 47: • '-' OpSide
      Second example: FuncCall • '-' OpSide
      Reduce derivation
        Instructions
        ↳ 37: Instructions
              ↳ 33: Sub                               Instructions
                    ↳ 51: OpSide           '-' OpSide ↳ 33: ε
                          ↳ 66: FuncCall •



State 54

   17 Assignment: • G_IDF SC_ASSIGN INT ';'
   18           | • G_IDF SC_ASSIGN FLOAT ';'
   19           | • G_IDF SC_ASSIGN BOOL ';'
   20 G_IDF: • G_IDF ',' IDF
   21      | • IDF
   26 Instructions: ε •  [KW_END, KW_Return, '}']
   27             | • Assignment Instructions
   28             | • For Instructions
   29             | • If Instructions
   30             | • Div Instructions
   31             | • Mult Instructions
   32             | • Add Instructions
   33             | • Sub Instructions
   34             | • Mod Instructions
   35             | • Increment ';' Instructions
   36             | • Decrement ';' Instructions
   37             | • FuncCall Instructions
   38             | • ProCall Instructions
   38             | ProCall • Instructions
   39 ArithmeticOp: • UnaryPlus
   40             | • UnaryMinus
   41             | • Div
   42             | • Mult
   43             | • Add
   44             | • Sub
   45             | • Mod
   46 UnaryPlus: • '+' OpSide
   47 UnaryMinus: • '-' OpSide
   48 Div: • OpSide '/' OpSide
   49 Mult: • OpSide '*' OpSide
   50 Add: • OpSide '+' OpSide
   51 Sub: • OpSide '-' OpSide
   52 Mod: • OpSide '%' OpSide
   53 Increment: • IDF SC_INCR
   54 Decrement: • IDF SC_DECR
   63 OpSide: • IDF
   64       | • Num
   65       | • ArithmeticOp
   66       | • FuncCall
   69 Num: • INT
   70    | • FLOAT
   71 For: • KW_For '(' IDF SC_ASSIGN INT ';' Expression ';' Increment ')' '{' Instructions '}'
   72 If: • KW_If Condition '{' Instructions '}'
   73   | • KW_If Condition '{' Instructions '}' KW_Else '{' Instructions '}'
   74 FuncCall: • KW_Fc IDF '(' Args_Liste ')' ';'
   75 ProCall: • KW_Pc IDF '(' Args_Liste ')' ';'

    INT     shift, and go to state 27
    FLOAT   shift, and go to state 28
    IDF     shift, and go to state 29
    KW_For  shift, and go to state 30
    KW_If   shift, and go to state 31
    KW_Pc   shift, and go to state 32
    KW_Fc   shift, and go to state 33
    '+'     shift, and go to state 34
    '-'     shift, and go to state 35

    $default  reduce using rule 26 (Instructions)

    Assignment    go to state 36
    G_IDF         go to state 37
    Instructions  go to state 94
    ArithmeticOp  go to state 39
    UnaryPlus     go to state 40
    UnaryMinus    go to state 41
    Div           go to state 42
    Mult          go to state 43
    Add           go to state 44
    Sub           go to state 45
    Mod           go to state 46
    Increment     go to state 47
    Decrement     go to state 48
    OpSide        go to state 49
    Num           go to state 50
    For           go to state 51
    If            go to state 52
    FuncCall      go to state 53
    ProCall       go to state 54


State 55

   17 Assignment: G_IDF SC_ASSIGN • INT ';'
   18           | G_IDF SC_ASSIGN • FLOAT ';'
   19           | G_IDF SC_ASSIGN • BOOL ';'

    INT    shift, and go to state 95
    FLOAT  shift, and go to state 96
    BOOL   shift, and go to state 97


State 56

    7 VarDeclaration: Type G_IDF ';' •

    $default  reduce using rule 7 (VarDeclaration)


State 57

   20 G_IDF: G_IDF ',' • IDF

    IDF  shift, and go to state 98


State 58

    9 ProDeclaration: KW_Void IDF '(' Parameter_Liste • ')' '{' VarInit Instructions '}'

    ')'  shift, and go to state 99


State 59

   11 Parameter_Liste: Type • IDF ',' Parameter_Liste

    IDF  shift, and go to state 100


State 60

    8 FuncDeclaration: KW_Function Type IDF '(' • Parameter_Liste ')' '{' VarInit Instructions Return '}'
   10 Parameter_Liste: ε •  [')']
   11                | • Type IDF ',' Parameter_Liste
   22 Type: • KW_int
   23     | • KW_float
   24     | • KW_boolean

    KW_int      shift, and go to state 1
    KW_float    shift, and go to state 2
    KW_boolean  shift, and go to state 3

    $default  reduce using rule 10 (Parameter_Liste)

    Parameter_Liste  go to state 101
    Type             go to state 59


State 61

   53 Increment: IDF SC_INCR •

    $default  reduce using rule 53 (Increment)


State 62

   54 Decrement: IDF SC_DECR •

    $default  reduce using rule 54 (Decrement)


State 63

   71 For: KW_For '(' • IDF SC_ASSIGN INT ';' Expression ';' Increment ')' '{' Instructions '}'

    IDF  shift, and go to state 102


State 64

   39 ArithmeticOp: • UnaryPlus
   40             | • UnaryMinus
   41             | • Div
   42             | • Mult
   43             | • Add
   44             | • Sub
   45             | • Mod
   46 UnaryPlus: • '+' OpSide
   47 UnaryMinus: • '-' OpSide
   48 Div: • OpSide '/' OpSide
   49 Mult: • OpSide '*' OpSide
   50 Add: • OpSide '+' OpSide
   51 Sub: • OpSide '-' OpSide
   52 Mod: • OpSide '%' OpSide
   63 OpSide: • IDF
   64       | • Num
   65       | • ArithmeticOp
   66       | • FuncCall
   67 Condition: '(' • Expression ')'
   68 Expression: • OpSide RelationalOp OpSide
   69 Num: • INT
   70    | • FLOAT
   74 FuncCall: • KW_Fc IDF '(' Args_Liste ')' ';'

    INT    shift, and go to state 27
    FLOAT  shift, and go to state 28
    IDF    shift, and go to state 68
    KW_Fc  shift, and go to state 33
    '+'    shift, and go to state 34
    '-'    shift, and go to state 35

    ArithmeticOp  go to state 39
    UnaryPlus     go to state 40
    UnaryMinus    go to state 41
    Div           go to state 69
    Mult          go to state 70
    Add           go to state 71
    Sub           go to state 72
    Mod           go to state 73
    OpSide        go to state 103
    Expression    go to state 104
    Num           go to state 50
    FuncCall      go to state 75


State 65

   72 If: KW_If Condition • '{' Instructions '}'
   73   | KW_If Condition • '{' Instructions '}' KW_Else '{' Instructions '}'

    '{'  shift, and go to state 105


State 66

   75 ProCall: KW_Pc IDF • '(' Args_Liste ')' ';'

    '('  shift, and go to state 106


State 67

   74 FuncCall: KW_Fc IDF • '(' Args_Liste ')' ';'

    '('  shift, and go to state 107


State 68

   63 OpSide: IDF •

    $default  reduce using rule 63 (OpSide)


State 69

   41 ArithmeticOp: Div •

    $default  reduce using rule 41 (ArithmeticOp)


State 70

   42 ArithmeticOp: Mult •

    $default  reduce using rule 42 (ArithmeticOp)


State 71

   43 ArithmeticOp: Add •

    $default  reduce using rule 43 (ArithmeticOp)


State 72

   44 ArithmeticOp: Sub •

    $default  reduce using rule 44 (ArithmeticOp)


State 73

   45 ArithmeticOp: Mod •

    $default  reduce using rule 45 (ArithmeticOp)


State 74

   46 UnaryPlus: '+' OpSide •  [INT, FLOAT, IDF, SC_EQUALS, SC_DIFF, SC_LOE, SC_GOE, KW_For, KW_If, KW_END, KW_Return, KW_Pc, KW_Fc, ';', ')', '}', '+', '-', '>', '<']
   48 Div: OpSide • '/' OpSide
   49 Mult: OpSide • '*' OpSide
   50 Add: OpSide • '+' OpSide
   51 Sub: OpSide • '-' OpSide
   52 Mod: OpSide • '%' OpSide

    '*'  shift, and go to state 88
    '/'  shift, and go to state 89
    '%'  shift, and go to state 90

    $default  reduce using rule 46 (UnaryPlus)

    Conflict between rule 46 and token '+' resolved as reduce (%left '+').
    Conflict between rule 46 and token '-' resolved as reduce (%left '-').
    Conflict between rule 46 and token '*' resolved as shift ('+' < '*').
    Conflict between rule 46 and token '/' resolved as shift ('+' < '/').
    Conflict between rule 46 and token '%' resolved as shift ('+' < '%').


State 75

   66 OpSide: FuncCall •

    $default  reduce using rule 66 (OpSide)


State 76

   47 UnaryMinus: '-' OpSide •  [INT, FLOAT, IDF, SC_EQUALS, SC_DIFF, SC_LOE, SC_GOE, KW_For, KW_If, KW_END, KW_Return, KW_Pc, KW_Fc, ';', ')', '}', '+', '-', '>', '<']
   48 Div: OpSide • '/' OpSide
   49 Mult: OpSide • '*' OpSide
   50 Add: OpSide • '+' OpSide
   51 Sub: OpSide • '-' OpSide
   52 Mod: OpSide • '%' OpSide

    '*'  shift, and go to state 88
    '/'  shift, and go to state 89
    '%'  shift, and go to state 90

    $default  reduce using rule 47 (UnaryMinus)

    Conflict between rule 47 and token '+' resolved as reduce (%left '+').
    Conflict between rule 47 and token '-' resolved as reduce (%left '-').
    Conflict between rule 47 and token '*' resolved as shift ('-' < '*').
    Conflict between rule 47 and token '/' resolved as shift ('-' < '/').
    Conflict between rule 47 and token '%' resolved as shift ('-' < '%').


State 77

   27 Instructions: Assignment Instructions •

    $default  reduce using rule 27 (Instructions)


State 78

   25 Instructions_Liste: KW_BEGIN Instructions KW_END •

    $default  reduce using rule 25 (Instructions_Liste)


State 79

   30 Instructions: Div Instructions •

    $default  reduce using rule 30 (Instructions)


State 80

   31 Instructions: Mult Instructions •

    $default  reduce using rule 31 (Instructions)


State 81

   32 Instructions: Add Instructions •

    $default  reduce using rule 32 (Instructions)


State 82

   33 Instructions: Sub Instructions •

    $default  reduce using rule 33 (Instructions)


State 83

   34 Instructions: Mod Instructions •

    $default  reduce using rule 34 (Instructions)


State 84

   17 Assignment: • G_IDF SC_ASSIGN INT ';'
   18           | • G_IDF SC_ASSIGN FLOAT ';'
   19           | • G_IDF SC_ASSIGN BOOL ';'
   20 G_IDF: • G_IDF ',' IDF
   21      | • IDF
   26 Instructions: ε •  [KW_END, KW_Return, '}']
   27             | • Assignment Instructions
   28             | • For Instructions
   29             | • If Instructions
   30             | • Div Instructions
   31             | • Mult Instructions
   32             | • Add Instructions
   33             | • Sub Instructions
   34             | • Mod Instructions
   35             | • Increment ';' Instructions
   35             | Increment ';' • Instructions
   36             | • Decrement ';' Instructions
   37             | • FuncCall Instructions
   38             | • ProCall Instructions
   39 ArithmeticOp: • UnaryPlus
   40             | • UnaryMinus
   41             | • Div
   42             | • Mult
   43             | • Add
   44             | • Sub
   45             | • Mod
   46 UnaryPlus: • '+' OpSide
   47 UnaryMinus: • '-' OpSide
   48 Div: • OpSide '/' OpSide
   49 Mult: • OpSide '*' OpSide
   50 Add: • OpSide '+' OpSide
   51 Sub: • OpSide '-' OpSide
   52 Mod: • OpSide '%' OpSide
   53 Increment: • IDF SC_INCR
   54 Decrement: • IDF SC_DECR
   63 OpSide: • IDF
   64       | • Num
   65       | • ArithmeticOp
   66       | • FuncCall
   69 Num: • INT
   70    | • FLOAT
   71 For: • KW_For '(' IDF SC_ASSIGN INT ';' Expression ';' Increment ')' '{' Instructions '}'
   72 If: • KW_If Condition '{' Instructions '}'
   73   | • KW_If Condition '{' Instructions '}' KW_Else '{' Instructions '}'
   74 FuncCall: • KW_Fc IDF '(' Args_Liste ')' ';'
   75 ProCall: • KW_Pc IDF '(' Args_Liste ')' ';'

    INT     shift, and go to state 27
    FLOAT   shift, and go to state 28
    IDF     shift, and go to state 29
    KW_For  shift, and go to state 30
    KW_If   shift, and go to state 31
    KW_Pc   shift, and go to state 32
    KW_Fc   shift, and go to state 33
    '+'     shift, and go to state 34
    '-'     shift, and go to state 35

    $default  reduce using rule 26 (Instructions)

    Assignment    go to state 36
    G_IDF         go to state 37
    Instructions  go to state 108
    ArithmeticOp  go to state 39
    UnaryPlus     go to state 40
    UnaryMinus    go to state 41
    Div           go to state 42
    Mult          go to state 43
    Add           go to state 44
    Sub           go to state 45
    Mod           go to state 46
    Increment     go to state 47
    Decrement     go to state 48
    OpSide        go to state 49
    Num           go to state 50
    For           go to state 51
    If            go to state 52
    FuncCall      go to state 53
    ProCall       go to state 54


State 85

   17 Assignment: • G_IDF SC_ASSIGN INT ';'
   18           | • G_IDF SC_ASSIGN FLOAT ';'
   19           | • G_IDF SC_ASSIGN BOOL ';'
   20 G_IDF: • G_IDF ',' IDF
   21      | • IDF
   26 Instructions: ε •  [KW_END, KW_Return, '}']
   27             | • Assignment Instructions
   28             | • For Instructions
   29             | • If Instructions
   30             | • Div Instructions
   31             | • Mult Instructions
   32             | • Add Instructions
   33             | • Sub Instructions
   34             | • Mod Instructions
   35             | • Increment ';' Instructions
   36             | • Decrement ';' Instructions
   36             | Decrement ';' • Instructions
   37             | • FuncCall Instructions
   38             | • ProCall Instructions
   39 ArithmeticOp: • UnaryPlus
   40             | • UnaryMinus
   41             | • Div
   42             | • Mult
   43             | • Add
   44             | • Sub
   45             | • Mod
   46 UnaryPlus: • '+' OpSide
   47 UnaryMinus: • '-' OpSide
   48 Div: • OpSide '/' OpSide
   49 Mult: • OpSide '*' OpSide
   50 Add: • OpSide '+' OpSide
   51 Sub: • OpSide '-' OpSide
   52 Mod: • OpSide '%' OpSide
   53 Increment: • IDF SC_INCR
   54 Decrement: • IDF SC_DECR
   63 OpSide: • IDF
   64       | • Num
   65       | • ArithmeticOp
   66       | • FuncCall
   69 Num: • INT
   70    | • FLOAT
   71 For: • KW_For '(' IDF SC_ASSIGN INT ';' Expression ';' Increment ')' '{' Instructions '}'
   72 If: • KW_If Condition '{' Instructions '}'
   73   | • KW_If Condition '{' Instructions '}' KW_Else '{' Instructions '}'
   74 FuncCall: • KW_Fc IDF '(' Args_Liste ')' ';'
   75 ProCall: • KW_Pc IDF '(' Args_Liste ')' ';'

    INT     shift, and go to state 27
    FLOAT   shift, and go to state 28
    IDF     shift, and go to state 29
    KW_For  shift, and go to state 30
    KW_If   shift, and go to state 31
    KW_Pc   shift, and go to state 32
    KW_Fc   shift, and go to state 33
    '+'     shift, and go to state 34
    '-'     shift, and go to state 35

    $default  reduce using rule 26 (Instructions)

    Assignment    go to state 36
    G_IDF         go to state 37
    Instructions  go to state 109
    ArithmeticOp  go to state 39
    UnaryPlus     go to state 40
    UnaryMinus    go to state 41
    Div           go to state 42
    Mult          go to state 43
    Add           go to state 44
    Sub           go to state 45
    Mod           go to state 46
    Increment     go to state 47
    Decrement     go to state 48
    OpSide        go to state 49
    Num           go to state 50
    For           go to state 51
    If            go to state 52
    FuncCall      go to state 53
    ProCall       go to state 54


State 86

   39 ArithmeticOp: • UnaryPlus
   40             | • UnaryMinus
   41             | • Div
   42             | • Mult
   43             | • Add
   44             | • Sub
   45             | • Mod
   46 UnaryPlus: • '+' OpSide
   47 UnaryMinus: • '-' OpSide
   48 Div: • OpSide '/' OpSide
   49 Mult: • OpSide '*' OpSide
   50 Add: • OpSide '+' OpSide
   50    | OpSide '+' • OpSide
   51 Sub: • OpSide '-' OpSide
   52 Mod: • OpSide '%' OpSide
   63 OpSide: • IDF
   64       | • Num
   65       | • ArithmeticOp
   66       | • FuncCall
   69 Num: • INT
   70    | • FLOAT
   74 FuncCall: • KW_Fc IDF '(' Args_Liste ')' ';'

    INT    shift, and go to state 27
    FLOAT  shift, and go to state 28
    IDF    shift, and go to state 68
    KW_Fc  shift, and go to state 33
    '+'    shift, and go to state 34
    '-'    shift, and go to state 35

    ArithmeticOp  go to state 39
    UnaryPlus     go to state 40
    UnaryMinus    go to state 41
    Div           go to state 69
    Mult          go to state 70
    Add           go to state 71
    Sub           go to state 72
    Mod           go to state 73
    OpSide        go to state 110
    Num           go to state 50
    FuncCall      go to state 75


State 87

   39 ArithmeticOp: • UnaryPlus
   40             | • UnaryMinus
   41             | • Div
   42             | • Mult
   43             | • Add
   44             | • Sub
   45             | • Mod
   46 UnaryPlus: • '+' OpSide
   47 UnaryMinus: • '-' OpSide
   48 Div: • OpSide '/' OpSide
   49 Mult: • OpSide '*' OpSide
   50 Add: • OpSide '+' OpSide
   51 Sub: • OpSide '-' OpSide
   51    | OpSide '-' • OpSide
   52 Mod: • OpSide '%' OpSide
   63 OpSide: • IDF
   64       | • Num
   65       | • ArithmeticOp
   66       | • FuncCall
   69 Num: • INT
   70    | • FLOAT
   74 FuncCall: • KW_Fc IDF '(' Args_Liste ')' ';'

    INT    shift, and go to state 27
    FLOAT  shift, and go to state 28
    IDF    shift, and go to state 68
    KW_Fc  shift, and go to state 33
    '+'    shift, and go to state 34
    '-'    shift, and go to state 35

    ArithmeticOp  go to state 39
    UnaryPlus     go to state 40
    UnaryMinus    go to state 41
    Div           go to state 69
    Mult          go to state 70
    Add           go to state 71
    Sub           go to state 72
    Mod           go to state 73
    OpSide        go to state 111
    Num           go to state 50
    FuncCall      go to state 75


State 88

   39 ArithmeticOp: • UnaryPlus
   40             | • UnaryMinus
   41             | • Div
   42             | • Mult
   43             | • Add
   44             | • Sub
   45             | • Mod
   46 UnaryPlus: • '+' OpSide
   47 UnaryMinus: • '-' OpSide
   48 Div: • OpSide '/' OpSide
   49 Mult: • OpSide '*' OpSide
   49     | OpSide '*' • OpSide
   50 Add: • OpSide '+' OpSide
   51 Sub: • OpSide '-' OpSide
   52 Mod: • OpSide '%' OpSide
   63 OpSide: • IDF
   64       | • Num
   65       | • ArithmeticOp
   66       | • FuncCall
   69 Num: • INT
   70    | • FLOAT
   74 FuncCall: • KW_Fc IDF '(' Args_Liste ')' ';'

    INT    shift, and go to state 27
    FLOAT  shift, and go to state 28
    IDF    shift, and go to state 68
    KW_Fc  shift, and go to state 33
    '+'    shift, and go to state 34
    '-'    shift, and go to state 35

    ArithmeticOp  go to state 39
    UnaryPlus     go to state 40
    UnaryMinus    go to state 41
    Div           go to state 69
    Mult          go to state 70
    Add           go to state 71
    Sub           go to state 72
    Mod           go to state 73
    OpSide        go to state 112
    Num           go to state 50
    FuncCall      go to state 75


State 89

   39 ArithmeticOp: • UnaryPlus
   40             | • UnaryMinus
   41             | • Div
   42             | • Mult
   43             | • Add
   44             | • Sub
   45             | • Mod
   46 UnaryPlus: • '+' OpSide
   47 UnaryMinus: • '-' OpSide
   48 Div: • OpSide '/' OpSide
   48    | OpSide '/' • OpSide
   49 Mult: • OpSide '*' OpSide
   50 Add: • OpSide '+' OpSide
   51 Sub: • OpSide '-' OpSide
   52 Mod: • OpSide '%' OpSide
   63 OpSide: • IDF
   64       | • Num
   65       | • ArithmeticOp
   66       | • FuncCall
   69 Num: • INT
   70    | • FLOAT
   74 FuncCall: • KW_Fc IDF '(' Args_Liste ')' ';'

    INT    shift, and go to state 27
    FLOAT  shift, and go to state 28
    IDF    shift, and go to state 68
    KW_Fc  shift, and go to state 33
    '+'    shift, and go to state 34
    '-'    shift, and go to state 35

    ArithmeticOp  go to state 39
    UnaryPlus     go to state 40
    UnaryMinus    go to state 41
    Div           go to state 69
    Mult          go to state 70
    Add           go to state 71
    Sub           go to state 72
    Mod           go to state 73
    OpSide        go to state 113
    Num           go to state 50
    FuncCall      go to state 75


State 90

   39 ArithmeticOp: • UnaryPlus
   40             | • UnaryMinus
   41             | • Div
   42             | • Mult
   43             | • Add
   44             | • Sub
   45             | • Mod
   46 UnaryPlus: • '+' OpSide
   47 UnaryMinus: • '-' OpSide
   48 Div: • OpSide '/' OpSide
   49 Mult: • OpSide '*' OpSide
   50 Add: • OpSide '+' OpSide
   51 Sub: • OpSide '-' OpSide
   52 Mod: • OpSide '%' OpSide
   52    | OpSide '%' • OpSide
   63 OpSide: • IDF
   64       | • Num
   65       | • ArithmeticOp
   66       | • FuncCall
   69 Num: • INT
   70    | • FLOAT
   74 FuncCall: • KW_Fc IDF '(' Args_Liste ')' ';'

    INT    shift, and go to state 27
    FLOAT  shift, and go to state 28
    IDF    shift, and go to state 68
    KW_Fc  shift, and go to state 33
    '+'    shift, and go to state 34
    '-'    shift, and go to state 35

    ArithmeticOp  go to state 39
    UnaryPlus     go to state 40
    UnaryMinus    go to state 41
    Div           go to state 69
    Mult          go to state 70
    Add           go to state 71
    Sub           go to state 72
    Mod           go to state 73
    OpSide        go to state 114
    Num           go to state 50
    FuncCall      go to state 75


State 91

   28 Instructions: For Instructions •

    $default  reduce using rule 28 (Instructions)


State 92

   29 Instructions: If Instructions •

    $default  reduce using rule 29 (Instructions)


State 93

   37 Instructions: FuncCall Instructions •

    $default  reduce using rule 37 (Instructions)


State 94

   38 Instructions: ProCall Instructions •

    $default  reduce using rule 38 (Instructions)


State 95

   17 Assignment: G_IDF SC_ASSIGN INT • ';'

    ';'  shift, and go to state 115


State 96

   18 Assignment: G_IDF SC_ASSIGN FLOAT • ';'

    ';'  shift, and go to state 116


State 97

   19 Assignment: G_IDF SC_ASSIGN BOOL • ';'

    ';'  shift, and go to state 117


State 98

   20 G_IDF: G_IDF ',' IDF •

    $default  reduce using rule 20 (G_IDF)


State 99

    9 ProDeclaration: KW_Void IDF '(' Parameter_Liste ')' • '{' VarInit Instructions '}'

    '{'  shift, and go to state 118


State 100

   11 Parameter_Liste: Type IDF • ',' Parameter_Liste

    ','  shift, and go to state 119


State 101

    8 FuncDeclaration: KW_Function Type IDF '(' Parameter_Liste • ')' '{' VarInit Instructions Return '}'

    ')'  shift, and go to state 120


State 102

   71 For: KW_For '(' IDF • SC_ASSIGN INT ';' Expression ';' Increment ')' '{' Instructions '}'

    SC_ASSIGN  shift, and go to state 121


State 103

   48 Div: OpSide • '/' OpSide
   49 Mult: OpSide • '*' OpSide
   50 Add: OpSide • '+' OpSide
   51 Sub: OpSide • '-' OpSide
   52 Mod: OpSide • '%' OpSide
   55 RelationalOp: • EqualityOp
   56             | • InequalityOp
   57 EqualityOp: • SC_EQUALS
   58           | • SC_DIFF
   59 InequalityOp: • SC_LOE
   60             | • SC_GOE
   61             | • '>'
   62             | • '<'
   68 Expression: OpSide • RelationalOp OpSide

    SC_EQUALS  shift, and go to state 122
    SC_DIFF    shift, and go to state 123
    SC_LOE     shift, and go to state 124
    SC_GOE     shift, and go to state 125
    '+'        shift, and go to state 86
    '-'        shift, and go to state 87
    '*'        shift, and go to state 88
    '/'        shift, and go to state 89
    '%'        shift, and go to state 90
    '>'        shift, and go to state 126
    '<'        shift, and go to state 127

    RelationalOp  go to state 128
    EqualityOp    go to state 129
    InequalityOp  go to state 130


State 104

   67 Condition: '(' Expression • ')'

    ')'  shift, and go to state 131


State 105

   17 Assignment: • G_IDF SC_ASSIGN INT ';'
   18           | • G_IDF SC_ASSIGN FLOAT ';'
   19           | • G_IDF SC_ASSIGN BOOL ';'
   20 G_IDF: • G_IDF ',' IDF
   21      | • IDF
   26 Instructions: ε •  ['}']
   27             | • Assignment Instructions
   28             | • For Instructions
   29             | • If Instructions
   30             | • Div Instructions
   31             | • Mult Instructions
   32             | • Add Instructions
   33             | • Sub Instructions
   34             | • Mod Instructions
   35             | • Increment ';' Instructions
   36             | • Decrement ';' Instructions
   37             | • FuncCall Instructions
   38             | • ProCall Instructions
   39 ArithmeticOp: • UnaryPlus
   40             | • UnaryMinus
   41             | • Div
   42             | • Mult
   43             | • Add
   44             | • Sub
   45             | • Mod
   46 UnaryPlus: • '+' OpSide
   47 UnaryMinus: • '-' OpSide
   48 Div: • OpSide '/' OpSide
   49 Mult: • OpSide '*' OpSide
   50 Add: • OpSide '+' OpSide
   51 Sub: • OpSide '-' OpSide
   52 Mod: • OpSide '%' OpSide
   53 Increment: • IDF SC_INCR
   54 Decrement: • IDF SC_DECR
   63 OpSide: • IDF
   64       | • Num
   65       | • ArithmeticOp
   66       | • FuncCall
   69 Num: • INT
   70    | • FLOAT
   71 For: • KW_For '(' IDF SC_ASSIGN INT ';' Expression ';' Increment ')' '{' Instructions '}'
   72 If: • KW_If Condition '{' Instructions '}'
   72   | KW_If Condition '{' • Instructions '}'
   73   | • KW_If Condition '{' Instructions '}' KW_Else '{' Instructions '}'
   73   | KW_If Condition '{' • Instructions '}' KW_Else '{' Instructions '}'
   74 FuncCall: • KW_Fc IDF '(' Args_Liste ')' ';'
   75 ProCall: • KW_Pc IDF '(' Args_Liste ')' ';'

    INT     shift, and go to state 27
    FLOAT   shift, and go to state 28
    IDF     shift, and go to state 29
    KW_For  shift, and go to state 30
    KW_If   shift, and go to state 31
    KW_Pc   shift, and go to state 32
    KW_Fc   shift, and go to state 33
    '+'     shift, and go to state 34
    '-'     shift, and go to state 35

    $default  reduce using rule 26 (Instructions)

    Assignment    go to state 36
    G_IDF         go to state 37
    Instructions  go to state 132
    ArithmeticOp  go to state 39
    UnaryPlus     go to state 40
    UnaryMinus    go to state 41
    Div           go to state 42
    Mult          go to state 43
    Add           go to state 44
    Sub           go to state 45
    Mod           go to state 46
    Increment     go to state 47
    Decrement     go to state 48
    OpSide        go to state 49
    Num           go to state 50
    For           go to state 51
    If            go to state 52
    FuncCall      go to state 53
    ProCall       go to state 54


State 106

   20 G_IDF: • G_IDF ',' IDF
   21      | • IDF
   75 ProCall: KW_Pc IDF '(' • Args_Liste ')' ';'
   76 Args_Liste: ε •  [')']
   77           | • G_IDF

    IDF  shift, and go to state 22

    $default  reduce using rule 76 (Args_Liste)

    G_IDF       go to state 133
    Args_Liste  go to state 134


State 107

   20 G_IDF: • G_IDF ',' IDF
   21      | • IDF
   74 FuncCall: KW_Fc IDF '(' • Args_Liste ')' ';'
   76 Args_Liste: ε •  [')']
   77           | • G_IDF

    IDF  shift, and go to state 22

    $default  reduce using rule 76 (Args_Liste)

    G_IDF       go to state 133
    Args_Liste  go to state 135


State 108

   35 Instructions: Increment ';' Instructions •

    $default  reduce using rule 35 (Instructions)


State 109

   36 Instructions: Decrement ';' Instructions •

    $default  reduce using rule 36 (Instructions)


State 110

   48 Div: OpSide • '/' OpSide
   49 Mult: OpSide • '*' OpSide
   50 Add: OpSide • '+' OpSide
   50    | OpSide '+' OpSide •  [INT, FLOAT, IDF, SC_EQUALS, SC_DIFF, SC_LOE, SC_GOE, KW_For, KW_If, KW_END, KW_Return, KW_Pc, KW_Fc, ';', ')', '}', '+', '-', '>', '<']
   51 Sub: OpSide • '-' OpSide
   52 Mod: OpSide • '%' OpSide

    '*'  shift, and go to state 88
    '/'  shift, and go to state 89
    '%'  shift, and go to state 90

    $default  reduce using rule 50 (Add)

    Conflict between rule 50 and token '+' resolved as reduce (%left '+').
    Conflict between rule 50 and token '-' resolved as reduce (%left '-').
    Conflict between rule 50 and token '*' resolved as shift ('+' < '*').
    Conflict between rule 50 and token '/' resolved as shift ('+' < '/').
    Conflict between rule 50 and token '%' resolved as shift ('+' < '%').


State 111

   48 Div: OpSide • '/' OpSide
   49 Mult: OpSide • '*' OpSide
   50 Add: OpSide • '+' OpSide
   51 Sub: OpSide • '-' OpSide
   51    | OpSide '-' OpSide •  [INT, FLOAT, IDF, SC_EQUALS, SC_DIFF, SC_LOE, SC_GOE, KW_For, KW_If, KW_END, KW_Return, KW_Pc, KW_Fc, ';', ')', '}', '+', '-', '>', '<']
   52 Mod: OpSide • '%' OpSide

    '*'  shift, and go to state 88
    '/'  shift, and go to state 89
    '%'  shift, and go to state 90

    $default  reduce using rule 51 (Sub)

    Conflict between rule 51 and token '+' resolved as reduce (%left '+').
    Conflict between rule 51 and token '-' resolved as reduce (%left '-').
    Conflict between rule 51 and token '*' resolved as shift ('-' < '*').
    Conflict between rule 51 and token '/' resolved as shift ('-' < '/').
    Conflict between rule 51 and token '%' resolved as shift ('-' < '%').


State 112

   48 Div: OpSide • '/' OpSide
   49 Mult: OpSide • '*' OpSide
   49     | OpSide '*' OpSide •  [INT, FLOAT, IDF, SC_EQUALS, SC_DIFF, SC_LOE, SC_GOE, KW_For, KW_If, KW_END, KW_Return, KW_Pc, KW_Fc, ';', ')', '}', '+', '-', '*', '/', '>', '<']
   50 Add: OpSide • '+' OpSide
   51 Sub: OpSide • '-' OpSide
   52 Mod: OpSide • '%' OpSide

    '%'  shift, and go to state 90

    $default  reduce using rule 49 (Mult)

    Conflict between rule 49 and token '+' resolved as reduce ('+' < '*').
    Conflict between rule 49 and token '-' resolved as reduce ('-' < '*').
    Conflict between rule 49 and token '*' resolved as reduce (%left '*').
    Conflict between rule 49 and token '/' resolved as reduce (%left '/').
    Conflict between rule 49 and token '%' resolved as shift ('*' < '%').


State 113

   48 Div: OpSide • '/' OpSide
   48    | OpSide '/' OpSide •  [INT, FLOAT, IDF, SC_EQUALS, SC_DIFF, SC_LOE, SC_GOE, KW_For, KW_If, KW_END, KW_Return, KW_Pc, KW_Fc, ';', ')', '}', '+', '-', '*', '/', '>', '<']
   49 Mult: OpSide • '*' OpSide
   50 Add: OpSide • '+' OpSide
   51 Sub: OpSide • '-' OpSide
   52 Mod: OpSide • '%' OpSide

    '%'  shift, and go to state 90

    $default  reduce using rule 48 (Div)

    Conflict between rule 48 and token '+' resolved as reduce ('+' < '/').
    Conflict between rule 48 and token '-' resolved as reduce ('-' < '/').
    Conflict between rule 48 and token '*' resolved as reduce (%left '*').
    Conflict between rule 48 and token '/' resolved as reduce (%left '/').
    Conflict between rule 48 and token '%' resolved as shift ('/' < '%').


State 114

   48 Div: OpSide • '/' OpSide
   49 Mult: OpSide • '*' OpSide
   50 Add: OpSide • '+' OpSide
   51 Sub: OpSide • '-' OpSide
   52 Mod: OpSide • '%' OpSide
   52    | OpSide '%' OpSide •  [INT, FLOAT, IDF, SC_EQUALS, SC_DIFF, SC_LOE, SC_GOE, KW_For, KW_If, KW_END, KW_Return, KW_Pc, KW_Fc, ';', ')', '}', '+', '-', '*', '/', '%', '>', '<']

    $default  reduce using rule 52 (Mod)

    Conflict between rule 52 and token '+' resolved as reduce ('+' < '%').
    Conflict between rule 52 and token '-' resolved as reduce ('-' < '%').
    Conflict between rule 52 and token '*' resolved as reduce ('*' < '%').
    Conflict between rule 52 and token '/' resolved as reduce ('/' < '%').
    Conflict between rule 52 and token '%' resolved as reduce (%left '%').


State 115

   17 Assignment: G_IDF SC_ASSIGN INT ';' •

    $default  reduce using rule 17 (Assignment)


State 116

   18 Assignment: G_IDF SC_ASSIGN FLOAT ';' •

    $default  reduce using rule 18 (Assignment)


State 117

   19 Assignment: G_IDF SC_ASSIGN BOOL ';' •

    $default  reduce using rule 19 (Assignment)


State 118

    9 ProDeclaration: KW_Void IDF '(' Parameter_Liste ')' '{' • VarInit Instructions '}'
   16 VarInit: • Type Assignment
   22 Type: • KW_int
   23     | • KW_float
   24     | • KW_boolean

    KW_int      shift, and go to state 1
    KW_float    shift, and go to state 2
    KW_boolean  shift, and go to state 3

    VarInit  go to state 136
    Type     go to state 137


State 119

   10 Parameter_Liste: ε •  [')']
   11                | • Type IDF ',' Parameter_Liste
   11                | Type IDF ',' • Parameter_Liste
   22 Type: • KW_int
   23     | • KW_float
   24     | • KW_boolean

    KW_int      shift, and go to state 1
    KW_float    shift, and go to state 2
    KW_boolean  shift, and go to state 3

    $default  reduce using rule 10 (Parameter_Liste)

    Parameter_Liste  go to state 138
    Type             go to state 59


State 120

    8 FuncDeclaration: KW_Function Type IDF '(' Parameter_Liste ')' • '{' VarInit Instructions Return '}'

    '{'  shift, and go to state 139


State 121

   71 For: KW_For '(' IDF SC_ASSIGN • INT ';' Expression ';' Increment ')' '{' Instructions '}'

    INT  shift, and go to state 140


State 122

   57 EqualityOp: SC_EQUALS •

    $default  reduce using rule 57 (EqualityOp)


State 123

   58 EqualityOp: SC_DIFF •

    $default  reduce using rule 58 (EqualityOp)


State 124

   59 InequalityOp: SC_LOE •

    $default  reduce using rule 59 (InequalityOp)


State 125

   60 InequalityOp: SC_GOE •

    $default  reduce using rule 60 (InequalityOp)


State 126

   61 InequalityOp: '>' •

    $default  reduce using rule 61 (InequalityOp)


State 127

   62 InequalityOp: '<' •

    $default  reduce using rule 62 (InequalityOp)


State 128

   39 ArithmeticOp: • UnaryPlus
   40             | • UnaryMinus
   41             | • Div
   42             | • Mult
   43             | • Add
   44             | • Sub
   45             | • Mod
   46 UnaryPlus: • '+' OpSide
   47 UnaryMinus: • '-' OpSide
   48 Div: • OpSide '/' OpSide
   49 Mult: • OpSide '*' OpSide
   50 Add: • OpSide '+' OpSide
   51 Sub: • OpSide '-' OpSide
   52 Mod: • OpSide '%' OpSide
   63 OpSide: • IDF
   64       | • Num
   65       | • ArithmeticOp
   66       | • FuncCall
   68 Expression: OpSide RelationalOp • OpSide
   69 Num: • INT
   70    | • FLOAT
   74 FuncCall: • KW_Fc IDF '(' Args_Liste ')' ';'

    INT    shift, and go to state 27
    FLOAT  shift, and go to state 28
    IDF    shift, and go to state 68
    KW_Fc  shift, and go to state 33
    '+'    shift, and go to state 34
    '-'    shift, and go to state 35

    ArithmeticOp  go to state 39
    UnaryPlus     go to state 40
    UnaryMinus    go to state 41
    Div           go to state 69
    Mult          go to state 70
    Add           go to state 71
    Sub           go to state 72
    Mod           go to state 73
    OpSide        go to state 141
    Num           go to state 50
    FuncCall      go to state 75


State 129

   55 RelationalOp: EqualityOp •

    $default  reduce using rule 55 (RelationalOp)


State 130

   56 RelationalOp: InequalityOp •

    $default  reduce using rule 56 (RelationalOp)


State 131

   67 Condition: '(' Expression ')' •

    $default  reduce using rule 67 (Condition)


State 132

   72 If: KW_If Condition '{' Instructions • '}'
   73   | KW_If Condition '{' Instructions • '}' KW_Else '{' Instructions '}'

    '}'  shift, and go to state 142


State 133

   20 G_IDF: G_IDF • ',' IDF
   77 Args_Liste: G_IDF •  [')']

    ','  shift, and go to state 57

    $default  reduce using rule 77 (Args_Liste)


State 134

   75 ProCall: KW_Pc IDF '(' Args_Liste • ')' ';'

    ')'  shift, and go to state 143


State 135

   74 FuncCall: KW_Fc IDF '(' Args_Liste • ')' ';'

    ')'  shift, and go to state 144


State 136

    9 ProDeclaration: KW_Void IDF '(' Parameter_Liste ')' '{' VarInit • Instructions '}'
   17 Assignment: • G_IDF SC_ASSIGN INT ';'
   18           | • G_IDF SC_ASSIGN FLOAT ';'
   19           | • G_IDF SC_ASSIGN BOOL ';'
   20 G_IDF: • G_IDF ',' IDF
   21      | • IDF
   26 Instructions: ε •  ['}']
   27             | • Assignment Instructions
   28             | • For Instructions
   29             | • If Instructions
   30             | • Div Instructions
   31             | • Mult Instructions
   32             | • Add Instructions
   33             | • Sub Instructions
   34             | • Mod Instructions
   35             | • Increment ';' Instructions
   36             | • Decrement ';' Instructions
   37             | • FuncCall Instructions
   38             | • ProCall Instructions
   39 ArithmeticOp: • UnaryPlus
   40             | • UnaryMinus
   41             | • Div
   42             | • Mult
   43             | • Add
   44             | • Sub
   45             | • Mod
   46 UnaryPlus: • '+' OpSide
   47 UnaryMinus: • '-' OpSide
   48 Div: • OpSide '/' OpSide
   49 Mult: • OpSide '*' OpSide
   50 Add: • OpSide '+' OpSide
   51 Sub: • OpSide '-' OpSide
   52 Mod: • OpSide '%' OpSide
   53 Increment: • IDF SC_INCR
   54 Decrement: • IDF SC_DECR
   63 OpSide: • IDF
   64       | • Num
   65       | • ArithmeticOp
   66       | • FuncCall
   69 Num: • INT
   70    | • FLOAT
   71 For: • KW_For '(' IDF SC_ASSIGN INT ';' Expression ';' Increment ')' '{' Instructions '}'
   72 If: • KW_If Condition '{' Instructions '}'
   73   | • KW_If Condition '{' Instructions '}' KW_Else '{' Instructions '}'
   74 FuncCall: • KW_Fc IDF '(' Args_Liste ')' ';'
   75 ProCall: • KW_Pc IDF '(' Args_Liste ')' ';'

    INT     shift, and go to state 27
    FLOAT   shift, and go to state 28
    IDF     shift, and go to state 29
    KW_For  shift, and go to state 30
    KW_If   shift, and go to state 31
    KW_Pc   shift, and go to state 32
    KW_Fc   shift, and go to state 33
    '+'     shift, and go to state 34
    '-'     shift, and go to state 35

    $default  reduce using rule 26 (Instructions)

    Assignment    go to state 36
    G_IDF         go to state 37
    Instructions  go to state 145
    ArithmeticOp  go to state 39
    UnaryPlus     go to state 40
    UnaryMinus    go to state 41
    Div           go to state 42
    Mult          go to state 43
    Add           go to state 44
    Sub           go to state 45
    Mod           go to state 46
    Increment     go to state 47
    Decrement     go to state 48
    OpSide        go to state 49
    Num           go to state 50
    For           go to state 51
    If            go to state 52
    FuncCall      go to state 53
    ProCall       go to state 54


State 137

   16 VarInit: Type • Assignment
   17 Assignment: • G_IDF SC_ASSIGN INT ';'
   18           | • G_IDF SC_ASSIGN FLOAT ';'
   19           | • G_IDF SC_ASSIGN BOOL ';'
   20 G_IDF: • G_IDF ',' IDF
   21      | • IDF

    IDF  shift, and go to state 22

    Assignment  go to state 23
    G_IDF       go to state 37


State 138

   11 Parameter_Liste: Type IDF ',' Parameter_Liste •

    $default  reduce using rule 11 (Parameter_Liste)


State 139

    8 FuncDeclaration: KW_Function Type IDF '(' Parameter_Liste ')' '{' • VarInit Instructions Return '}'
   16 VarInit: • Type Assignment
   22 Type: • KW_int
   23     | • KW_float
   24     | • KW_boolean

    KW_int      shift, and go to state 1
    KW_float    shift, and go to state 2
    KW_boolean  shift, and go to state 3

    VarInit  go to state 146
    Type     go to state 137


State 140

   71 For: KW_For '(' IDF SC_ASSIGN INT • ';' Expression ';' Increment ')' '{' Instructions '}'

    ';'  shift, and go to state 147


State 141

   48 Div: OpSide • '/' OpSide
   49 Mult: OpSide • '*' OpSide
   50 Add: OpSide • '+' OpSide
   51 Sub: OpSide • '-' OpSide
   52 Mod: OpSide • '%' OpSide
   68 Expression: OpSide RelationalOp OpSide •  [';', ')']

    '+'  shift, and go to state 86
    '-'  shift, and go to state 87
    '*'  shift, and go to state 88
    '/'  shift, and go to state 89
    '%'  shift, and go to state 90

    $default  reduce using rule 68 (Expression)


State 142

   72 If: KW_If Condition '{' Instructions '}' •  [INT, FLOAT, IDF, KW_For, KW_If, KW_END, KW_Return, KW_Pc, KW_Fc, '}', '+', '-']
   73   | KW_If Condition '{' Instructions '}' • KW_Else '{' Instructions '}'

    KW_Else  shift, and go to state 148

    $default  reduce using rule 72 (If)


State 143

   75 ProCall: KW_Pc IDF '(' Args_Liste ')' • ';'

    ';'  shift, and go to state 149


State 144

   74 FuncCall: KW_Fc IDF '(' Args_Liste ')' • ';'

    ';'  shift, and go to state 150


State 145

    9 ProDeclaration: KW_Void IDF '(' Parameter_Liste ')' '{' VarInit Instructions • '}'

    '}'  shift, and go to state 151


State 146

    8 FuncDeclaration: KW_Function Type IDF '(' Parameter_Liste ')' '{' VarInit • Instructions Return '}'
   17 Assignment: • G_IDF SC_ASSIGN INT ';'
   18           | • G_IDF SC_ASSIGN FLOAT ';'
   19           | • G_IDF SC_ASSIGN BOOL ';'
   20 G_IDF: • G_IDF ',' IDF
   21      | • IDF
   26 Instructions: ε •  [KW_Return]
   27             | • Assignment Instructions
   28             | • For Instructions
   29             | • If Instructions
   30             | • Div Instructions
   31             | • Mult Instructions
   32             | • Add Instructions
   33             | • Sub Instructions
   34             | • Mod Instructions
   35             | • Increment ';' Instructions
   36             | • Decrement ';' Instructions
   37             | • FuncCall Instructions
   38             | • ProCall Instructions
   39 ArithmeticOp: • UnaryPlus
   40             | • UnaryMinus
   41             | • Div
   42             | • Mult
   43             | • Add
   44             | • Sub
   45             | • Mod
   46 UnaryPlus: • '+' OpSide
   47 UnaryMinus: • '-' OpSide
   48 Div: • OpSide '/' OpSide
   49 Mult: • OpSide '*' OpSide
   50 Add: • OpSide '+' OpSide
   51 Sub: • OpSide '-' OpSide
   52 Mod: • OpSide '%' OpSide
   53 Increment: • IDF SC_INCR
   54 Decrement: • IDF SC_DECR
   63 OpSide: • IDF
   64       | • Num
   65       | • ArithmeticOp
   66       | • FuncCall
   69 Num: • INT
   70    | • FLOAT
   71 For: • KW_For '(' IDF SC_ASSIGN INT ';' Expression ';' Increment ')' '{' Instructions '}'
   72 If: • KW_If Condition '{' Instructions '}'
   73   | • KW_If Condition '{' Instructions '}' KW_Else '{' Instructions '}'
   74 FuncCall: • KW_Fc IDF '(' Args_Liste ')' ';'
   75 ProCall: • KW_Pc IDF '(' Args_Liste ')' ';'

    INT     shift, and go to state 27
    FLOAT   shift, and go to state 28
    IDF     shift, and go to state 29
    KW_For  shift, and go to state 30
    KW_If   shift, and go to state 31
    KW_Pc   shift, and go to state 32
    KW_Fc   shift, and go to state 33
    '+'     shift, and go to state 34
    '-'     shift, and go to state 35

    $default  reduce using rule 26 (Instructions)

    Assignment    go to state 36
    G_IDF         go to state 37
    Instructions  go to state 152
    ArithmeticOp  go to state 39
    UnaryPlus     go to state 40
    UnaryMinus    go to state 41
    Div           go to state 42
    Mult          go to state 43
    Add           go to state 44
    Sub           go to state 45
    Mod           go to state 46
    Increment     go to state 47
    Decrement     go to state 48
    OpSide        go to state 49
    Num           go to state 50
    For           go to state 51
    If            go to state 52
    FuncCall      go to state 53
    ProCall       go to state 54


State 147

   39 ArithmeticOp: • UnaryPlus
   40             | • UnaryMinus
   41             | • Div
   42             | • Mult
   43             | • Add
   44             | • Sub
   45             | • Mod
   46 UnaryPlus: • '+' OpSide
   47 UnaryMinus: • '-' OpSide
   48 Div: • OpSide '/' OpSide
   49 Mult: • OpSide '*' OpSide
   50 Add: • OpSide '+' OpSide
   51 Sub: • OpSide '-' OpSide
   52 Mod: • OpSide '%' OpSide
   63 OpSide: • IDF
   64       | • Num
   65       | • ArithmeticOp
   66       | • FuncCall
   68 Expression: • OpSide RelationalOp OpSide
   69 Num: • INT
   70    | • FLOAT
   71 For: KW_For '(' IDF SC_ASSIGN INT ';' • Expression ';' Increment ')' '{' Instructions '}'
   74 FuncCall: • KW_Fc IDF '(' Args_Liste ')' ';'

    INT    shift, and go to state 27
    FLOAT  shift, and go to state 28
    IDF    shift, and go to state 68
    KW_Fc  shift, and go to state 33
    '+'    shift, and go to state 34
    '-'    shift, and go to state 35

    ArithmeticOp  go to state 39
    UnaryPlus     go to state 40
    UnaryMinus    go to state 41
    Div           go to state 69
    Mult          go to state 70
    Add           go to state 71
    Sub           go to state 72
    Mod           go to state 73
    OpSide        go to state 103
    Expression    go to state 153
    Num           go to state 50
    FuncCall      go to state 75


State 148

   73 If: KW_If Condition '{' Instructions '}' KW_Else • '{' Instructions '}'

    '{'  shift, and go to state 154


State 149

   75 ProCall: KW_Pc IDF '(' Args_Liste ')' ';' •

    $default  reduce using rule 75 (ProCall)


State 150

   74 FuncCall: KW_Fc IDF '(' Args_Liste ')' ';' •

    $default  reduce using rule 74 (FuncCall)


State 151

    9 ProDeclaration: KW_Void IDF '(' Parameter_Liste ')' '{' VarInit Instructions '}' •

    $default  reduce using rule 9 (ProDeclaration)


State 152

    8 FuncDeclaration: KW_Function Type IDF '(' Parameter_Liste ')' '{' VarInit Instructions • Return '}'
   12 Return: • KW_Return INT ';'
   13       | • KW_Return FLOAT ';'
   14       | • KW_Return BOOL ';'
   15       | • KW_Return IDF ';'

    KW_Return  shift, and go to state 155

    Return  go to state 156


State 153

   71 For: KW_For '(' IDF SC_ASSIGN INT ';' Expression • ';' Increment ')' '{' Instructions '}'

    ';'  shift, and go to state 157


State 154

   17 Assignment: • G_IDF SC_ASSIGN INT ';'
   18           | • G_IDF SC_ASSIGN FLOAT ';'
   19           | • G_IDF SC_ASSIGN BOOL ';'
   20 G_IDF: • G_IDF ',' IDF
   21      | • IDF
   26 Instructions: ε •  ['}']
   27             | • Assignment Instructions
   28             | • For Instructions
   29             | • If Instructions
   30             | • Div Instructions
   31             | • Mult Instructions
   32             | • Add Instructions
   33             | • Sub Instructions
   34             | • Mod Instructions
   35             | • Increment ';' Instructions
   36             | • Decrement ';' Instructions
   37             | • FuncCall Instructions
   38             | • ProCall Instructions
   39 ArithmeticOp: • UnaryPlus
   40             | • UnaryMinus
   41             | • Div
   42             | • Mult
   43             | • Add
   44             | • Sub
   45             | • Mod
   46 UnaryPlus: • '+' OpSide
   47 UnaryMinus: • '-' OpSide
   48 Div: • OpSide '/' OpSide
   49 Mult: • OpSide '*' OpSide
   50 Add: • OpSide '+' OpSide
   51 Sub: • OpSide '-' OpSide
   52 Mod: • OpSide '%' OpSide
   53 Increment: • IDF SC_INCR
   54 Decrement: • IDF SC_DECR
   63 OpSide: • IDF
   64       | • Num
   65       | • ArithmeticOp
   66       | • FuncCall
   69 Num: • INT
   70    | • FLOAT
   71 For: • KW_For '(' IDF SC_ASSIGN INT ';' Expression ';' Increment ')' '{' Instructions '}'
   72 If: • KW_If Condition '{' Instructions '}'
   73   | • KW_If Condition '{' Instructions '}' KW_Else '{' Instructions '}'
   73   | KW_If Condition '{' Instructions '}' KW_Else '{' • Instructions '}'
   74 FuncCall: • KW_Fc IDF '(' Args_Liste ')' ';'
   75 ProCall: • KW_Pc IDF '(' Args_Liste ')' ';'

    INT     shift, and go to state 27
    FLOAT   shift, and go to state 28
    IDF     shift, and go to state 29
    KW_For  shift, and go to state 30
    KW_If   shift, and go to state 31
    KW_Pc   shift, and go to state 32
    KW_Fc   shift, and go to state 33
    '+'     shift, and go to state 34
    '-'     shift, and go to state 35

    $default  reduce using rule 26 (Instructions)

    Assignment    go to state 36
    G_IDF         go to state 37
    Instructions  go to state 158
    ArithmeticOp  go to state 39
    UnaryPlus     go to state 40
    UnaryMinus    go to state 41
    Div           go to state 42
    Mult          go to state 43
    Add           go to state 44
    Sub           go to state 45
    Mod           go to state 46
    Increment     go to state 47
    Decrement     go to state 48
    OpSide        go to state 49
    Num           go to state 50
    For           go to state 51
    If            go to state 52
    FuncCall      go to state 53
    ProCall       go to state 54


State 155

   12 Return: KW_Return • INT ';'
   13       | KW_Return • FLOAT ';'
   14       | KW_Return • BOOL ';'
   15       | KW_Return • IDF ';'

    INT    shift, and go to state 159
    FLOAT  shift, and go to state 160
    BOOL   shift, and go to state 161
    IDF    shift, and go to state 162


State 156

    8 FuncDeclaration: KW_Function Type IDF '(' Parameter_Liste ')' '{' VarInit Instructions Return • '}'

    '}'  shift, and go to state 163


State 157

   53 Increment: • IDF SC_INCR
   71 For: KW_For '(' IDF SC_ASSIGN INT ';' Expression ';' • Increment ')' '{' Instructions '}'

    IDF  shift, and go to state 164

    Increment  go to state 165


State 158

   73 If: KW_If Condition '{' Instructions '}' KW_Else '{' Instructions • '}'

    '}'  shift, and go to state 166


State 159

   12 Return: KW_Return INT • ';'

    ';'  shift, and go to state 167


State 160

   13 Return: KW_Return FLOAT • ';'

    ';'  shift, and go to state 168


State 161

   14 Return: KW_Return BOOL • ';'

    ';'  shift, and go to state 169


State 162

   15 Return: KW_Return IDF • ';'

    ';'  shift, and go to state 170


State 163

    8 FuncDeclaration: KW_Function Type IDF '(' Parameter_Liste ')' '{' VarInit Instructions Return '}' •

    $default  reduce using rule 8 (FuncDeclaration)


State 164

   53 Increment: IDF • SC_INCR

    SC_INCR  shift, and go to state 61


State 165

   71 For: KW_For '(' IDF SC_ASSIGN INT ';' Expression ';' Increment • ')' '{' Instructions '}'

    ')'  shift, and go to state 171


State 166

   73 If: KW_If Condition '{' Instructions '}' KW_Else '{' Instructions '}' •

    $default  reduce using rule 73 (If)


State 167

   12 Return: KW_Return INT ';' •

    $default  reduce using rule 12 (Return)


State 168

   13 Return: KW_Return FLOAT ';' •

    $default  reduce using rule 13 (Return)


State 169

   14 Return: KW_Return BOOL ';' •

    $default  reduce using rule 14 (Return)


State 170

   15 Return: KW_Return IDF ';' •

    $default  reduce using rule 15 (Return)


State 171

   71 For: KW_For '(' IDF SC_ASSIGN INT ';' Expression ';' Increment ')' • '{' Instructions '}'

    '{'  shift, and go to state 172


State 172

   17 Assignment: • G_IDF SC_ASSIGN INT ';'
   18           | • G_IDF SC_ASSIGN FLOAT ';'
   19           | • G_IDF SC_ASSIGN BOOL ';'
   20 G_IDF: • G_IDF ',' IDF
   21      | • IDF
   26 Instructions: ε •  ['}']
   27             | • Assignment Instructions
   28             | • For Instructions
   29             | • If Instructions
   30             | • Div Instructions
   31             | • Mult Instructions
   32             | • Add Instructions
   33             | • Sub Instructions
   34             | • Mod Instructions
   35             | • Increment ';' Instructions
   36             | • Decrement ';' Instructions
   37             | • FuncCall Instructions
   38             | • ProCall Instructions
   39 ArithmeticOp: • UnaryPlus
   40             | • UnaryMinus
   41             | • Div
   42             | • Mult
   43             | • Add
   44             | • Sub
   45             | • Mod
   46 UnaryPlus: • '+' OpSide
   47 UnaryMinus: • '-' OpSide
   48 Div: • OpSide '/' OpSide
   49 Mult: • OpSide '*' OpSide
   50 Add: • OpSide '+' OpSide
   51 Sub: • OpSide '-' OpSide
   52 Mod: • OpSide '%' OpSide
   53 Increment: • IDF SC_INCR
   54 Decrement: • IDF SC_DECR
   63 OpSide: • IDF
   64       | • Num
   65       | • ArithmeticOp
   66       | • FuncCall
   69 Num: • INT
   70    | • FLOAT
   71 For: • KW_For '(' IDF SC_ASSIGN INT ';' Expression ';' Increment ')' '{' Instructions '}'
   71    | KW_For '(' IDF SC_ASSIGN INT ';' Expression ';' Increment ')' '{' • Instructions '}'
   72 If: • KW_If Condition '{' Instructions '}'
   73   | • KW_If Condition '{' Instructions '}' KW_Else '{' Instructions '}'
   74 FuncCall: • KW_Fc IDF '(' Args_Liste ')' ';'
   75 ProCall: • KW_Pc IDF '(' Args_Liste ')' ';'

    INT     shift, and go to state 27
    FLOAT   shift, and go to state 28
    IDF     shift, and go to state 29
    KW_For  shift, and go to state 30
    KW_If   shift, and go to state 31
    KW_Pc   shift, and go to state 32
    KW_Fc   shift, and go to state 33
    '+'     shift, and go to state 34
    '-'     shift, and go to state 35

    $default  reduce using rule 26 (Instructions)

    Assignment    go to state 36
    G_IDF         go to state 37
    Instructions  go to state 173
    ArithmeticOp  go to state 39
    UnaryPlus     go to state 40
    UnaryMinus    go to state 41
    Div           go to state 42
    Mult          go to state 43
    Add           go to state 44
    Sub           go to state 45
    Mod           go to state 46
    Increment     go to state 47
    Decrement     go to state 48
    OpSide        go to state 49
    Num           go to state 50
    For           go to state 51
    If            go to state 52
    FuncCall      go to state 53
    ProCall       go to state 54


State 173

   71 For: KW_For '(' IDF SC_ASSIGN INT ';' Expression ';' Increment ')' '{' Instructions • '}'

    '}'  shift, and go to state 174


State 174

   71 For: KW_For '(' IDF SC_ASSIGN INT ';' Expression ';' Increment ')' '{' Instructions '}' •

    $default  reduce using rule 71 (For)
