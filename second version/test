%{
    #include <stdio.h> 
    #include "../inc/parser.h"
    #include "../inc/sym_table.h" 
    #include <string.h>
    #include <stdlib.h>
    #include <stdbool.h>
    extern int line_num;
    extern char* Curr_Type;
    extern bool Curr_Const;
    extern char* Curr_Scope;
    extern char* Curr_Assign; 
    extern char* Curr_Assign_Type; 
    bool check_type;
    /* int temp_val; */
    void yyerror();
    int yylex();
%}

%define parse.error verbose

%union {
    int u_val_int;
    float u_val_float;
    float u_val_bool;
    char* u_idf;
    char u_op;
}

%token <u_val_int>INT_VAL
%token <u_val_int>NEG_INT_VAL
%token <u_val_float>FLOAT_VAL
%token <u_val_float>NEG_FLOAT_VAL
%token <u_val_bool>BOOL_VAL
%token <u_idf>IDENTIFIER

%token <u_op>ADD
%token <u_op>DIV
%token <u_op>MULT
%token <u_op>SUB

%token LANG VAR INT FLOAT CONST BOOL START END IF WHILE RET FUNC ASSIGN
%token EQUAL GREATER GREATER_EQ LESS LESS_EQ
%token INSTR_END SEP TYPE_SEP
%token LEFT_PAR RIGHT_PAR


%start S



%%
S: LANG IDENTIFIER functions_opt VAR variables_opt START  instructions_opt END


variables_opt: %empty 
             | list_var 
             | list_const;

            /* handling variables */
            
list_var: var_names 
        | var_names list_var 
        | var_names list_const;

var_names: IDENTIFIER  var_type  
         | IDENTIFIER SEP var_names 

var_type: TYPE_SEP INT INSTR_END 
        | TYPE_SEP FLOAT INSTR_END 
        | TYPE_SEP BOOL INSTR_END 




            /* handling constants */
list_const:  const_names 
          | const_names list_const 
          | const_names list_var;

const_names: IDENTIFIER  ASSIGN INT_VAL const_type             
           | IDENTIFIER  ASSIGN NEG_INT_VAL const_type 
           | IDENTIFIER  ASSIGN INT_VAL SEP const_names       
           | IDENTIFIER  ASSIGN NEG_INT_VAL SEP const_names    
           | IDENTIFIER  ASSIGN FLOAT_VAL const_type   
           | IDENTIFIER  ASSIGN NEG_FLOAT_VAL const_type 
           | IDENTIFIER  ASSIGN FLOAT_VAL SEP const_names    
           | IDENTIFIER  ASSIGN NEG_FLOAT_VAL SEP const_names 
           | IDENTIFIER  ASSIGN BOOL_VAL const_type     
           | IDENTIFIER  ASSIGN BOOL_VAL SEP const_names  

const_type: TYPE_SEP CONST INT INSTR_END 
          | TYPE_SEP CONST FLOAT INSTR_END 
          | TYPE_SEP CONST BOOL INSTR_END ;

            /* utility */
math: singletons 
    | neg_singletons
    | idf
    | BOOL_VAL;

singletons: INT_VAL   
          | INT_VAL ADD singletons         
          | INT_VAL ADD idf            
          | INT_VAL MULT math          
          | INT_VAL DIV math           
          | FLOAT_VAL          
          | FLOAT_VAL ADD singletons
          | FLOAT_VAL ADD idf     
          | FLOAT_VAL MULT math    
          | FLOAT_VAL DIV math      

neg_singletons: NEG_INT_VAL        
              | NEG_INT_VAL ADD singletons  
              | NEG_INT_VAL ADD idf        
              | NEG_INT_VAL SUB singletons 
              | NEG_INT_VAL SUB idf      
              | NEG_INT_VAL MULT math   
              | NEG_INT_VAL DIV math     


              | NEG_FLOAT_VAL            
              | NEG_FLOAT_VAL ADD singletons     
              | NEG_FLOAT_VAL ADD idf       
              | NEG_FLOAT_VAL SUB singletons  
              | NEG_FLOAT_VAL SUB idf       
              | NEG_FLOAT_VAL MULT math     
              | NEG_FLOAT_VAL DIV math    

idf: IDENTIFIER 
   | IDENTIFIER
   | IDENTIFIER SUB idf
   | IDENTIFIER ADD singletons 
   | IDENTIFIER ADD idf 
   | IDENTIFIER MULT math 
   | IDENTIFIER DIV math



condition: 	LEFT_PAR math relational_operators math RIGHT_PAR 
		| LEFT_PAR math RIGHT_PAR;

relational_operators: EQUAL | GREATER | GREATER_EQ | LESS | LESS_EQ;

types: BOOL | INT | FLOAT;

            /* handling instructions */

instructions_opt: %empty 
		| assign instructions_opt 
		| if instructions_opt 
		| while instructions_opt;

assign: IDENTIFIER ASSIGN math INSTR_END;

if: IF condition START instructions_opt END;

while: WHILE condition START instructions_opt END;

            /* handling functions */

functions_opt: %empty | function_declaration functions_opt;

function_declaration: types FUNC IDENTIFIER {Curr_Scope = $3;} VAR variables_opt START instructions_opt return END ; 
             
return: RET INT_VAL INSTR_END 
      | RET FLOAT_VAL INSTR_END 
      | RET BOOL_VAL INSTR_END 
      | RET IDENTIFIER INSTR_END;
%%

/* void yyerror(){ */
    /* printf("syntax error at line %d\n", line_num); */
/* } */
